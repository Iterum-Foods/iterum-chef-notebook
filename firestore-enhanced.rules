rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ============================================
    // HELPER FUNCTIONS
    // ============================================
    
    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Check if email is valid
    function isValidEmail(email) {
      return email is string && email.matches('.*@.*[.].*');
    }
    
    // Check if data size is within limits
    function isValidSize() {
      return request.resource.size() < 1000000; // 1MB limit per document
    }
    
    // Check if timestamp is recent (prevent replay attacks)
    function isRecentTimestamp() {
      return request.time - request.resource.data.timestamp < duration.value(5, 'm');
    }
    
    // ============================================
    // USER PROFILES
    // ============================================
    
    match /users/{userId} {
      // Users can read their own profile
      allow read: if isOwner(userId);
      
      // Users can create their own profile
      allow create: if isOwner(userId) 
                    && isValidSize()
                    && request.resource.data.email is string
                    && request.resource.data.name is string;
      
      // Users can update their own profile
      allow update: if isOwner(userId)
                    && isValidSize()
                    // Prevent changing critical fields
                    && request.resource.data.userId == resource.data.userId;
      
      // Users can delete their own profile
      allow delete: if isOwner(userId);
      
      // ============================================
      // USER SUB-COLLECTIONS
      // ============================================
      
      // Recipes sub-collection
      match /recipes/{recipeId} {
        allow read: if isOwner(userId);
        allow write: if isOwner(userId) && isValidSize();
      }
      
      // Ingredients sub-collection
      match /ingredients/{ingredientId} {
        allow read: if isOwner(userId);
        allow write: if isOwner(userId) && isValidSize();
      }
      
      // Projects sub-collection
      match /projects/{projectId} {
        allow read: if isOwner(userId);
        allow write: if isOwner(userId) && isValidSize();
      }
      
      // Menus sub-collection
      match /menus/{menuId} {
        allow read: if isOwner(userId);
        allow write: if isOwner(userId) && isValidSize();
      }
      
      // Equipment sub-collection
      match /equipment/{equipmentId} {
        allow read: if isOwner(userId);
        allow write: if isOwner(userId) && isValidSize();
      }
      
      // Vendors sub-collection
      match /vendors/{vendorId} {
        allow read: if isOwner(userId);
        allow write: if isOwner(userId) && isValidSize();
      }
      
      // Inventory sub-collection
      match /inventory/{inventoryId} {
        allow read: if isOwner(userId);
        allow write: if isOwner(userId) && isValidSize();
      }
      
      // Notes sub-collection
      match /notes/{noteId} {
        allow read: if isOwner(userId);
        allow write: if isOwner(userId) && isValidSize();
      }
    }
    
    // ============================================
    // SHARED/PUBLIC DATA
    // ============================================
    
    // Public recipe ideas (read-only for inspiration)
    match /public_recipes/{recipeId} {
      allow read: if isAuthenticated();
      allow write: if false; // Managed by admin only
    }
    
    // Public ingredients database (read-only)
    match /public_ingredients/{ingredientId} {
      allow read: if true; // Public access
      allow write: if false; // Admin only
    }
    
    // ============================================
    // WAITLIST & CONTACTS
    // ============================================
    
    match /contacts/{contactId} {
      // Allow anyone to CREATE waitlist entries (public signup)
      allow create: if request.resource.data.contactType == 'waitlist'
                    && isValidEmail(request.resource.data.email)
                    && isValidSize();
      
      // Authenticated users can read contacts
      allow read: if isAuthenticated();
      
      // Authenticated users can update/delete contacts
      allow update, delete: if isAuthenticated();
    }
    
    // ============================================
    // ANALYTICS & LOGS
    // ============================================
    
    match /analytics/{eventId} {
      // Users can write their own analytics
      allow create: if isAuthenticated() && isValidSize();
      
      // Only admins can read analytics
      allow read: if false; // Read via backend only
    }
    
    match /activity_logs/{logId} {
      // Users can create their own activity logs
      allow create: if isAuthenticated() && isValidSize();
      
      // Users can read their own logs
      allow read: if isAuthenticated() 
                  && resource.data.userId == request.auth.uid;
    }
    
    // ============================================
    // ADMIN COLLECTIONS
    // ============================================
    
    match /admin/{document=**} {
      allow read, write: if false; // Backend access only
    }
    
    // ============================================
    // DEFAULT: DENY ALL
    // ============================================
    
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

