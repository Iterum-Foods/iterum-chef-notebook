name: Comprehensive Security Scan

on:
  schedule:
    # Run security scans weekly on Sundays at 3 AM UTC
    - cron: '0 3 * * 0'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: false
        default: 'full'
        type: choice
        options:
        - full
        - dependencies
        - code
        - secrets

jobs:
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v6
      with:
        node-version: '18.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    # Dependency Security Scan
    - name: Run npm audit
      if: github.event.inputs.scan_type == 'dependencies' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''
      run: |
        echo "Running npm security audit..."
        npm audit --audit-level moderate --json > npm-audit-results.json || true
        
    - name: Run Snyk security scan
      if: github.event.inputs.scan_type == 'dependencies' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --json > snyk-results.json
        
    # Code Security Analysis
    - name: Initialize CodeQL
      if: github.event.inputs.scan_type == 'code' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        
    - name: Perform CodeQL Analysis
      if: github.event.inputs.scan_type == 'code' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''
      uses: github/codeql-action/analyze@v3
      
    # Secrets Detection
    - name: Run Gitleaks
      if: github.event.inputs.scan_type == 'secrets' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    # Additional Security Tools
    - name: Run Semgrep
      if: github.event.inputs.scan_type == 'code' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/javascript
          p/owasp-top-ten
        generateSarif: "1"
        
    - name: Run Trivy filesystem scan
      if: github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == ''
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    # Generate Security Report
    - name: Generate security report
      run: |
        echo "# Security Scan Report" > security-report.md
        echo "Generated on: $(date)" >> security-report.md
        echo "" >> security-report.md
        
        echo "## Scan Summary" >> security-report.md
        echo "- **Scan Type**: ${{ github.event.inputs.scan_type || 'full' }}" >> security-report.md
        echo "- **Repository**: ${{ github.repository }}" >> security-report.md
        echo "- **Branch**: ${{ github.ref_name }}" >> security-report.md
        echo "- **Commit**: ${{ github.sha }}" >> security-report.md
        echo "" >> security-report.md
        
        echo "## Dependency Security" >> security-report.md
        if [ -f npm-audit-results.json ]; then
          echo "### npm audit results" >> security-report.md
          cat npm-audit-results.json | jq '.vulnerabilities | length' >> security-report.md || echo "No vulnerabilities found" >> security-report.md
        fi
        
        echo "## Code Security" >> security-report.md
        echo "### CodeQL Analysis" >> security-report.md
        echo "- CodeQL analysis completed" >> security-report.md
        
        echo "### Semgrep Analysis" >> security-report.md
        echo "- Semgrep scan completed" >> security-report.md
        
        echo "## Recommendations" >> security-report.md
        echo "1. Review all security findings" >> security-report.md
        echo "2. Update vulnerable dependencies" >> security-report.md
        echo "3. Address code security issues" >> security-report.md
        echo "4. Implement additional security measures" >> security-report.md
        
    - name: Upload security artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results-${{ github.run_number }}
        path: |
          security-report.md
          npm-audit-results.json
          snyk-results.json
          trivy-results.sarif
          semgrep.sarif
          
    - name: Upload SARIF files
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: |
          trivy-results.sarif
          semgrep.sarif
          
    - name: Comment on PR with security results
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          
          let reportContent = '';
          try {
            reportContent = fs.readFileSync('security-report.md', 'utf8');
          } catch (error) {
            reportContent = 'Security scan completed. Check artifacts for detailed results.';
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## ðŸ”’ Security Scan Results
          
          ${reportContent}
          
          ### ðŸ“‹ Next Steps:
          1. Review the security scan results
          2. Address any critical vulnerabilities
          3. Update dependencies if needed
          4. Implement recommended security measures
          
          **Note**: Detailed results are available in the workflow artifacts.`
          });
          
    - name: Create security issue on critical findings
      uses: actions/github-script@v7
      if: failure()
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'ðŸš¨ Critical Security Issues Detected',
            body: `## Critical Security Issues Found
            
            The automated security scan has detected critical security issues that require immediate attention.
            
            ### Details:
            - **Scan Date**: ${new Date().toISOString()}
            - **Repository**: ${context.repo.owner}/${context.repo.repo}
            - **Branch**: ${context.ref}
            
            ### Action Required:
            1. Review the security scan results in the workflow artifacts
            2. Address critical vulnerabilities immediately
            3. Update dependencies and code as needed
            4. Re-run security scans to verify fixes
            
            ### Priority: ðŸ”´ Critical
            
            Please prioritize addressing these security issues to maintain the security posture of the application.`,
            labels: ['security', 'critical', 'automated']
          });
          
    - name: Notify security team
      uses: 8398a7/action-slack@v3
      if: failure()
      with:
        status: failure
        channel: '#security-alerts'
        text: 'ðŸš¨ Critical security issues detected in Iterum Culinary App'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
