<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Iterum R&D Chef Notebook</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            scroll-behavior: smooth;
        }
    </style>
</head>
<body class="bg-gray-50 text-gray-800">
    <!-- Header Section -->
    <header class="bg-white shadow-md py-4">
        <div class="container mx-auto px-4 flex justify-between items-center">
            <!-- Logo/App Title -->
            <a href="#" class="text-2xl font-bold text-blue-700">
                Iterum R&D Chef Notebook
            </a>
            <!-- Desktop Navigation -->
            <nav class="hidden md:block">
                <ul class="flex space-x-6">
                    <li><a href="#recipe-management" class="text-gray-700 hover:text-blue-600 transition duration-300 font-medium">Recipe Management</a></li>
                    <li><a href="#ingredient-database" class="text-gray-700 hover:text-blue-600 transition duration-300 font-medium">Ingredient Database</a></li>
                    <li><a href="#pantry-inventory" class="text-gray-700 hover:text-blue-600 transition duration-300 font-medium">Pantry Inventory</a></li>
                    <li><a href="#tools" class="text-gray-700 hover:text-blue-600 transition duration-300 font-medium">Tools</a></li>
                </ul>
            </nav>
            <!-- Mobile Menu Button -->
            <div class="md:hidden">
                <button id="mobile-menu-button" class="text-gray-700 hover:text-blue-600 focus:outline-none focus:shadow-outline p-2 rounded-md">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" />
                    </svg>
                </button>
                <!-- Mobile Menu Content -->
                <div id="mobile-menu" class="hidden absolute right-4 mt-2 w-48 bg-white rounded-md shadow-lg py-2 z-10">
                    <a href="#recipe-management" class="block px-4 py-2 text-gray-700 hover:bg-gray-100 hover:text-blue-600 transition duration-300">Recipe Management</a>
                    <a href="#ingredient-database" class="block px-4 py-2 text-gray-700 hover:bg-gray-100 hover:text-blue-600 transition duration-300">Ingredient Database</a>
                    <a href="#pantry-inventory" class="block px-4 py-2 text-gray-700 hover:bg-gray-100 hover:text-blue-600 transition duration-300">Pantry Inventory</a>
                    <a href="#tools" class="block px-4 py-2 text-gray-700 hover:bg-gray-100 hover:text-blue-600 transition duration-300">Tools</a>
                </div>
            </div>
        </div>
    </header>

    <!-- Main Content Area -->
    <main class="container mx-auto px-4 py-8">

        <!-- Welcome Section -->
        <section class="bg-blue-100 rounded-lg shadow-lg p-8 mb-12 text-center">
            <h1 class="text-4xl font-bold text-blue-800 mb-4">Welcome, R&D Chef!</h1>
            <p class="text-lg text-blue-700">Your digital notebook for culinary innovation and precision.</p>
        </section>

        <!-- 1.1 Recipe & Dish Creation/Editing -->
        <section id="recipe-management" class="bg-white rounded-lg shadow-xl p-8 mb-12">
            <h2 class="text-3xl font-semibold text-gray-800 mb-6 border-b pb-4">Recipe Management</h2>

            <!-- New Recipe Form -->
            <div class="mb-8">
                <h3 class="text-2xl font-medium text-gray-700 mb-4">Create/Edit Recipe</h3>
                <form id="recipe-form" class="space-y-6">
                    <div>
                        <label for="recipe-name" class="block text-gray-700 text-sm font-bold mb-2">Recipe Name:</label>
                        <input type="text" id="recipe-name" placeholder="e.g., Spicy Thai Basil Chicken" class="shadow-sm appearance-none border rounded-lg w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-300" required>
                    </div>

                    <div>
                        <label for="recipe-description" class="block text-gray-700 text-sm font-bold mb-2">Description / Notes:</label>
                        <textarea id="recipe-description" rows="3" placeholder="Brief description or general notes about the dish." class="shadow-sm appearance-none border rounded-lg w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-300"></textarea>
                    </div>

                    <!-- Ingredients Section -->
                    <div>
                        <label class="block text-gray-700 text-sm font-bold mb-2">Ingredients:</label>
                        <div id="ingredients-container" class="space-y-3">
                            <!-- Initial ingredient row -->
                            <div class="flex flex-col sm:flex-row gap-2">
                                <input type="text" placeholder="Ingredient Name" class="shadow-sm border rounded-lg py-2 px-3 flex-grow focus:outline-none focus:ring-2 focus:ring-blue-300">
                                <input type="number" placeholder="Quantity" min="0" step="any" class="shadow-sm border rounded-lg py-2 px-3 w-24 focus:outline-none focus:ring-2 focus:ring-blue-300">
                                <select class="shadow-sm border rounded-lg py-2 px-3 w-24 focus:outline-none focus:ring-2 focus:ring-blue-300">
                                    <option value="">Unit</option>
                                    <option value="g">g</option>
                                    <option value="ml">ml</option>
                                    <option value="cup">cup</option>
                                    <option value="tsp">tsp</option>
                                    <option value="tbsp">tbsp</option>
                                    <option value="each">each</option>
                                </select>
                                <button type="button" class="remove-ingredient-btn bg-red-100 hover:bg-red-200 text-red-700 p-2 rounded-full transition duration-300 flex items-center justify-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5"><path stroke-linecap="round" stroke-linejoin="round" d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.924a2.25 2.25 0 01-2.244-2.077L4.74 5.938m1.588-.59L10.59 1.5l1.044 1.054L15.364 5.21M6.01 6.01l4.477 4.477m-4.477 0l4.477-4.477"></path></svg>
                                </button>
                            </div>
                        </div>
                        <button type="button" id="add-ingredient-btn" class="mt-3 bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded-full transition duration-300">Add Ingredient</button>
                    </div>

                    <!-- Instructions Section -->
                    <div>
                        <label class="block text-gray-700 text-sm font-bold mb-2">Instructions:</label>
                        <div id="instructions-container" class="space-y-3">
                            <!-- Initial instruction step -->
                            <div class="flex gap-2">
                                <textarea placeholder="Step 1: Describe this step..." rows="2" class="shadow-sm border rounded-lg py-2 px-3 flex-grow focus:outline-none focus:ring-2 focus:ring-blue-300"></textarea>
                                <button type="button" class="remove-instruction-btn bg-red-100 hover:bg-red-200 text-red-700 p-2 rounded-full transition duration-300 flex items-center justify-center">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5"><path stroke-linecap="round" stroke-linejoin="round" d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.924a2.25 2.25 0 01-2.244-2.077L4.74 5.938m1.588-.59L10.59 1.5l1.044 1.054L15.364 5.21M6.01 6.01l4.477 4.477m-4.477 0l4.477-4.477"></path></svg>
                                </button>
                            </div>
                        </div>
                        <button type="button" id="add-instruction-btn" class="mt-3 bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded-full transition duration-300">Add Step</button>
                    </div>

                    <div class="flex justify-end space-x-4">
                        <button type="reset" class="bg-gray-200 hover:bg-gray-300 text-gray-800 font-medium py-2 px-6 rounded-full transition duration-300">Clear</button>
                        <button type="submit" class="bg-green-600 hover:bg-green-700 text-white font-semibold py-2 px-6 rounded-full shadow-md transition duration-300">Save Recipe</button>
                    </div>
                </form>
            </div>

            <!-- Saved Recipes (Placeholder for 1.2 Version Control) -->
            <div>
                <h3 class="text-2xl font-medium text-gray-700 mb-4">Saved Recipes</h3>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    <!-- Example Recipe Card -->
                    <div class="bg-gray-100 rounded-lg p-4 shadow-sm hover:shadow-md transition duration-300">
                        <h4 class="font-bold text-lg text-gray-800 mb-1">Classic Tomato Soup v2</h4>
                        <p class="text-sm text-gray-600 mb-2">Refined recipe with roasted tomatoes for deeper flavor.</p>
                        <div class="flex justify-between items-center text-sm">
                            <span class="text-blue-600 hover:underline cursor-pointer">View Details</span>
                            <span class="text-gray-500">Last updated: 2024-06-16</span>
                            <!-- Placeholder for version control actions -->
                            <button class="text-blue-500 hover:text-blue-700 text-xs">History</button>
                        </div>
                    </div>
                    <div class="bg-gray-100 rounded-lg p-4 shadow-sm hover:shadow-md transition duration-300">
                        <h4 class="font-bold text-lg text-gray-800 mb-1">Spicy Noodle Stir-fry</h4>
                        <p class="text-sm text-gray-600 mb-2">A quick and versatile stir-fry base.</p>
                        <div class="flex justify-between items-center text-sm">
                            <span class="text-blue-600 hover:underline cursor-pointer">View Details</span>
                            <span class="text-gray-500">Last updated: 2024-05-20</span>
                            <button class="text-blue-500 hover:text-blue-700 text-xs">History</button>
                        </div>
                    </div>
                    <!-- More recipes would be dynamically loaded here -->
                </div>
            </div>
        </section>

        <!-- 1.3 Master Ingredient Database -->
        <section id="ingredient-database" class="bg-white rounded-lg shadow-xl p-8 mb-12">
            <h2 class="text-3xl font-semibold text-gray-800 mb-6 border-b pb-4">Master Ingredient Database</h2>

            <div class="mb-6">
                <h3 class="text-2xl font-medium text-gray-700 mb-4">Add New Ingredient</h3>
                <div class="flex flex-col sm:flex-row gap-4">
                    <input type="text" id="new-ingredient-name" placeholder="Ingredient Name" class="shadow-sm border rounded-lg py-2 px-3 flex-grow focus:outline-none focus:ring-2 focus:ring-blue-300">
                    <input type="text" id="new-ingredient-unit" placeholder="Default Unit (e.g., g, ml, each)" class="shadow-sm border rounded-lg py-2 px-3 w-48 focus:outline-none focus:ring-2 focus:ring-blue-300">
                    <button id="add-to-database-btn" class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-6 rounded-full transition duration-300">Add to Database</button>
                </div>
            </div>

            <div>
                <h3 class="text-2xl font-medium text-gray-700 mb-4">Existing Ingredients</h3>
                <input type="text" id="search-ingredients" placeholder="Search ingredients..." class="shadow-sm border rounded-lg w-full py-2 px-3 mb-4 focus:outline-none focus:ring-2 focus:ring-blue-300">

                <div id="existing-ingredients-container" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                    <!-- Ingredients will be dynamically loaded here by JavaScript -->
                </div>
            </div>
        </section>

        <!-- 1.4 Pantry Inventory (Basic) -->
        <section id="pantry-inventory" class="bg-white rounded-lg shadow-xl p-8 mb-12">
            <h2 class="text-3xl font-semibold text-gray-800 mb-6 border-b pb-4">Pantry Inventory</h2>

            <div class="mb-6">
                <h3 class="text-2xl font-medium text-gray-700 mb-4">Update Pantry Stock</h3>
                <div class="flex flex-col sm:flex-row gap-4">
                    <input type="text" placeholder="Ingredient Name" class="shadow-sm border rounded-lg py-2 px-3 flex-grow focus:outline-none focus:ring-2 focus:ring-blue-300">
                    <input type="number" placeholder="Quantity" min="0" step="any" class="shadow-sm border rounded-lg py-2 px-3 w-24 focus:outline-none focus:ring-2 focus:ring-blue-300">
                    <select class="shadow-sm border rounded-lg py-2 px-3 w-24 focus:outline-none focus:ring-2 focus:ring-blue-300">
                        <option value="">Unit</option>
                        <option value="g">g</option>
                        <option value="ml">ml</option>
                        <option value="cup">cup</option>
                        <option value="tsp">tsp</option>
                        <option value="tbsp">tbsp</option>
                        <option value="each">each</option>
                    </select>
                    <button class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-6 rounded-full transition duration-300">Add/Update Stock</button>
                </div>
            </div>

            <div>
                <h3 class="text-2xl font-medium text-gray-700 mb-4">Current Pantry Stock</h3>
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                    <!-- Example Pantry Items -->
                    <div class="bg-gray-100 rounded-lg p-3 shadow-sm flex justify-between items-center">
                        <span class="font-medium">Flour</span>
                        <span class="text-gray-600">5 kg</span>
                    </div>
                    <div class="bg-gray-100 rounded-lg p-3 shadow-sm flex justify-between items-center">
                        <span class="font-medium">Sugar</span>
                        <span class="text-gray-600">2 kg</span>
                    </div>
                    <div class="bg-gray-100 rounded-lg p-3 shadow-sm flex justify-between items-center">
                        <span class="font-medium">Eggs</span>
                        <span class="text-gray-600">12 each</span>
                    </div>
                </div>
            </div>
        </section>

        <!-- 1.5 Basic Scaling & Unit Conversion (Tools Section) -->
        <section id="tools" class="bg-white rounded-lg shadow-xl p-8 mb-12">
            <h2 class="text-3xl font-semibold text-gray-800 mb-6 border-b pb-4">R&D Tools</h2>

            <div class="mb-6">
                <h3 class="text-2xl font-medium text-gray-700 mb-4">Recipe Scaling</h3>
                <div class="flex flex-col sm:flex-row items-end gap-4">
                    <div class="flex-grow">
                        <label for="scale-recipe" class="block text-gray-700 text-sm font-bold mb-2">Select Recipe:</label>
                        <select id="scale-recipe" class="shadow-sm appearance-none border rounded-lg w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-300">
                            <option value="">Choose a recipe</option>
                            <option value="recipe1">Classic Tomato Soup v2</option>
                            <option value="recipe2">Spicy Noodle Stir-fry</option>
                        </select>
                    </div>
                    <div>
                        <label for="current-servings" class="block text-gray-700 text-sm font-bold mb-2">Current Servings:</label>
                        <input type="number" id="current-servings" value="4" min="1" class="shadow-sm border rounded-lg py-2 px-3 w-24 focus:outline-none focus:ring-2 focus:ring-blue-300">
                    </div>
                    <div>
                        <label for="new-servings" class="block text-gray-700 text-sm font-bold mb-2">New Servings:</label>
                        <input type="number" id="new-servings" value="8" min="1" class="shadow-sm border rounded-lg py-2 px-3 w-24 focus:outline-none focus:ring-2 focus:ring-blue-300">
                    </div>
                    <button class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-6 rounded-full transition duration-300">Scale Recipe</button>
                </div>
                <div class="mt-4 p-4 bg-blue-50 rounded-lg hidden" id="scaled-recipe-output">
                    <h4 class="font-semibold text-gray-800">Scaled Recipe (Preview):</h4>
                    <ul class="list-disc list-inside text-gray-700 text-sm">
                        <li>Ingredient A: <span class="font-medium">X units</span></li>
                        <li>Ingredient B: <span class="font-medium">Y units</span></li>
                        <!-- Dynamic content would go here -->
                    </ul>
                </div>
            </div>

            <div>
                <h3 class="text-2xl font-medium text-gray-700 mb-4">Unit Converter</h3>
                <div class="flex flex-col sm:flex-row items-end gap-4">
                    <div class="flex-grow">
                        <label for="convert-quantity" class="block text-gray-700 text-sm font-bold mb-2">Quantity:</label>
                        <input type="number" id="convert-quantity" value="100" min="0" step="any" class="shadow-sm border rounded-lg w-full py-2 px-3 focus:outline-none focus:ring-2 focus:ring-blue-300">
                    </div>
                    <div>
                        <label for="convert-from" class="block text-gray-700 text-sm font-bold mb-2">From Unit:</label>
                        <select id="convert-from" class="shadow-sm appearance-none border rounded-lg w-24 py-2 px-3 focus:outline-none focus:ring-2 focus:ring-blue-300">
                            <option value="g">g</option>
                            <option value="ml">ml</option>
                            <option value="cup">cup</option>
                            <option value="tsp">tsp</option>
                            <option value="tbsp">tbsp</option>
                        </select>
                    </div>
                    <div>
                        <label for="convert-to" class="block text-gray-700 text-sm font-bold mb-2">To Unit:</label>
                        <select id="convert-to" class="shadow-sm appearance-none border rounded-lg w-24 py-2 px-3 focus:outline-none focus:ring-2 focus:ring-blue-300">
                            <option value="kg">kg</option>
                            <option value="liter">Liter</option>
                            <option value="oz">oz (fluid)</option>
                            <option value="lb">lb</option>
                        </select>
                    </div>
                    <button class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-6 rounded-full transition duration-300">Convert</button>
                </div>
                <div class="mt-4 p-4 bg-blue-50 rounded-lg hidden" id="conversion-output">
                    <h4 class="font-semibold text-gray-800">Result:</h4>
                    <p class="text-gray-700 text-lg"><span class="font-medium">XXX</span> <span id="converted-unit"></span></p>
                </div>
            </div>
        </section>

        <!-- Placeholder for 1.6 Menu Creation & 1.7 Prep List Generation -->
        <section class="bg-white rounded-lg shadow-xl p-8 mb-12">
            <h2 class="text-3xl font-semibold text-gray-800 mb-6 border-b pb-4">Menu & Prep List</h2>
            <p class="text-gray-700 mb-4">
                This section will allow you to compile dishes into menus and generate consolidated prep lists.
                (Features 1.6 & 1.7 from your roadmap).
            </p>
            <button class="bg-purple-600 hover:bg-purple-700 text-white font-medium py-2 px-6 rounded-full transition duration-300">Go to Menu Builder</button>
        </section>

    </main>

    <!-- Footer Section -->
    <footer class="bg-gray-800 text-white py-6">
        <div class="container mx-auto px-4 text-center">
            <p>&copy; 2024 Iterum R&D Chef Notebook. All rights reserved.</p>
        </div>
    </footer>

    <!-- JavaScript for interactivity -->
    <script>
        // Mobile Menu Toggle
        const mobileMenuButton = document.getElementById('mobile-menu-button');
        const mobileMenu = document.getElementById('mobile-menu');

        if (mobileMenuButton && mobileMenu) {
            mobileMenuButton.addEventListener('click', () => {
                mobileMenu.classList.toggle('hidden');
            });

            // Close mobile menu when a link is clicked
            mobileMenu.querySelectorAll('a').forEach(link => {
                link.addEventListener('click', () => {
                    mobileMenu.classList.add('hidden');
                });
            });
        }

        // Preloaded ingredients from Specialty Produce
        const preloadedIngredients = [
            { name: "Apples", category: "Fruit", defaultUnit: "each" },
            { name: "Avocados", category: "Fruit", defaultUnit: "each" },
            { name: "Bananas", category: "Fruit", defaultUnit: "each" },
            { name: "Blackberries", category: "Fruit", defaultUnit: "g" },
            { name: "Blueberries", category: "Fruit", defaultUnit: "g" },
            { name: "Raspberries", category: "Fruit", defaultUnit: "g" },
            { name: "Strawberries", category: "Fruit", defaultUnit: "g" },
            { name: "Cherries", category: "Fruit", defaultUnit: "g" },
            { name: "Citron", category: "Fruit", defaultUnit: "each" },
            { name: "Coconuts", category: "Fruit", defaultUnit: "each" },
            { name: "Dates", category: "Fruit", defaultUnit: "g" },
            { name: "Dragon Fruit", category: "Fruit", defaultUnit: "each" },
            { name: "Durians", category: "Fruit", defaultUnit: "each" },
            { name: "Figs", category: "Fruit", defaultUnit: "g" },
            { name: "Grapefruit", category: "Fruit", defaultUnit: "each" },
            { name: "Grapes", category: "Fruit", defaultUnit: "g" },
            { name: "Guavas", category: "Fruit", defaultUnit: "each" },
            { name: "Jambu", category: "Fruit", defaultUnit: "each" },
            { name: "Jujube", category: "Fruit", defaultUnit: "g" },
            { name: "Kiwi", category: "Fruit", defaultUnit: "each" },
            { name: "Kumquats", category: "Fruit", defaultUnit: "g" },
            { name: "Lemons", category: "Fruit", defaultUnit: "each" },
            { name: "Limes", category: "Fruit", defaultUnit: "each" },
            { name: "Lulo", category: "Fruit", defaultUnit: "each" },
            { name: "Mandarins", category: "Fruit", defaultUnit: "each" },
            { name: "Mangoes", category: "Fruit", defaultUnit: "each" },
            { name: "Melons", category: "Fruit", defaultUnit: "each" },
            { name: "Squash", category: "Vegetable", defaultUnit: "each" },
            { name: "Tomatoes", category: "Vegetable", defaultUnit: "each" },
            { name: "Rambutan", category: "Fruit", defaultUnit: "g" }
        ];

        // Function to render ingredients
        const renderIngredients = (ingredientsToRender) => {
            const existingIngredientsContainer = document.getElementById('existing-ingredients-container');
            if (existingIngredientsContainer) {
                existingIngredientsContainer.innerHTML = ''; // Clear existing content
                ingredientsToRender.forEach(ingredient => {
                    const ingredientDiv = document.createElement('div');
                    ingredientDiv.className = 'bg-gray-100 rounded-lg p-3 shadow-sm flex justify-between items-center';
                    ingredientDiv.innerHTML = `
                        <span class="font-medium">${ingredient.name} (${ingredient.defaultUnit || 'N/A'})</span>
                        <span class="text-sm text-gray-600">Category: ${ingredient.category || 'N/A'}</span>
                    `;
                    existingIngredientsContainer.appendChild(ingredientDiv);
                });
            }
        };

        // Initial render of preloaded ingredients
        document.addEventListener('DOMContentLoaded', () => {
            renderIngredients(preloadedIngredients);
        });

        // Search functionality for ingredients
        const searchIngredientsInput = document.getElementById('search-ingredients');
        if (searchIngredientsInput) {
            searchIngredientsInput.addEventListener('keyup', (event) => {
                const searchTerm = event.target.value.toLowerCase();
                const filteredIngredients = preloadedIngredients.filter(ingredient =>
                    ingredient.name.toLowerCase().includes(searchTerm) ||
                    (ingredient.category && ingredient.category.toLowerCase().includes(searchTerm))
                );
                renderIngredients(filteredIngredients);
            });
        }

        // Dynamic Ingredient Rows in Recipe Form
        const ingredientsContainer = document.getElementById('ingredients-container');
        const addIngredientBtn = document.getElementById('add-ingredient-btn');

        const addIngredientRow = () => {
            const newRow = document.createElement('div');
            newRow.className = 'flex flex-col sm:flex-row gap-2';
            newRow.innerHTML = `
                <input type="text" placeholder="Ingredient Name" class="shadow-sm border rounded-lg py-2 px-3 flex-grow focus:outline-none focus:ring-2 focus:ring-blue-300">
                <input type="number" placeholder="Quantity" min="0" step="any" class="shadow-sm border rounded-lg py-2 px-3 w-24 focus:outline-none focus:ring-2 focus:ring-blue-300">
                <select class="shadow-sm border rounded-lg py-2 px-3 w-24 focus:outline-none focus:ring-2 focus:ring-blue-300">
                    <option value="">Unit</option>
                    <option value="g">g</option>
                    <option value="ml">ml</option>
                    <option value="cup">cup</option>
                    <option value="tsp">tsp</option>
                    <option value="tbsp">tbsp</option>
                    <option value="each">each</option>
                </select>
                <button type="button" class="remove-ingredient-btn bg-red-100 hover:bg-red-200 text-red-700 p-2 rounded-full transition duration-300 flex items-center justify-center">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5"><path stroke-linecap="round" stroke-linejoin="round" d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.924a2.25 2.25 0 01-2.244-2.077L4.74 5.938m1.588-.59L10.59 1.5l1.044 1.054L15.364 5.21M6.01 6.01l4.477 4.477m-4.477 0l4.477-4.477"></path></svg>
                </button>
            `;
            ingredientsContainer.appendChild(newRow);
        };

        addIngredientBtn.addEventListener('click', addIngredientRow);

        // Remove Ingredient Row (event delegation)
        ingredientsContainer.addEventListener('click', (event) => {
            if (event.target.closest('.remove-ingredient-btn')) {
                // Ensure there's at least one row left before removing
                if (ingredientsContainer.children.length > 1) {
                    event.target.closest('.flex.flex-col.sm\\:flex-row.gap-2').remove();
                } else {
                    // Optionally, show a message that at least one ingredient is required
                    console.log("Cannot remove the last ingredient row.");
                }
            }
        });

        // Dynamic Instruction Steps in Recipe Form
        const instructionsContainer = document.getElementById('instructions-container');
        const addInstructionBtn = document.getElementById('add-instruction-btn');

        const addInstructionStep = () => {
            const newStep = document.createElement('div');
            newStep.className = 'flex gap-2';
            newStep.innerHTML = `
                <textarea placeholder="Step ${instructionsContainer.children.length + 1}: Describe this step..." rows="2" class="shadow-sm border rounded-lg py-2 px-3 flex-grow focus:outline-none focus:ring-2 focus:ring-blue-300"></textarea>
                <button type="button" class="remove-instruction-btn bg-red-100 hover:bg-red-200 text-red-700 p-2 rounded-full transition duration-300 flex items-center justify-center">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5"><path stroke-linecap="round" stroke-linejoin="round" d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.924a2.25 2.25 0 01-2.244-2.077L4.74 5.938m1.588-.59L10.59 1.5l1.044 1.054L15.364 5.21M6.01 6.01l4.477 4.477m-4.477 0l4.477-4.477"></path></svg>
                </button>
            `;
            instructionsContainer.appendChild(newStep);
        };

        addInstructionBtn.addEventListener('click', addInstructionStep);

        // Remove Instruction Step (event delegation)
        instructionsContainer.addEventListener('click', (event) => {
            if (event.target.closest('.remove-instruction-btn')) {
                if (instructionsContainer.children.length > 1) {
                    event.target.closest('.flex.gap-2').remove();
                    // Re-label steps if necessary (more complex for rich text, but good for simple sequential)
                    Array.from(instructionsContainer.children).forEach((stepDiv, index) => {
                        const textarea = stepDiv.querySelector('textarea');
                        if (textarea) {
                            textarea.placeholder = `Step ${index + 1}: Describe this step...`;
                        }
                    });
                } else {
                    console.log("Cannot remove the last instruction step.");
                }
            }
        });

        // Basic form submission simulation (for demonstration)
        const recipeForm = document.getElementById('recipe-form');
        if (recipeForm) {
            recipeForm.addEventListener('submit', (event) => {
                event.preventDefault(); // Prevent actual form submission
                // In a real application, you would collect data from the form fields,
                // process it, and send it to a backend for storage (Wave 1.8 User Accounts & Data Security).
                console.log("Recipe data submitted!");
                console.log("Recipe Name:", document.getElementById('recipe-name').value);
                console.log("Description:", document.getElementById('recipe-description').value);

                // Simulate saving ingredients
                const ingredients = [];
                ingredientsContainer.querySelectorAll('.flex.flex-col.sm\\:flex-row.gap-2').forEach(row => {
                    const name = row.children[0].value;
                    const quantity = row.children[1].value;
                    const unit = row.children[2].value;
                    if (name && quantity && unit) {
                        ingredients.push({ name, quantity, unit });
                    }
                });
                console.log("Ingredients:", ingredients);

                // Simulate saving instructions
                const instructions = [];
                instructionsContainer.querySelectorAll('.flex.gap-2 textarea').forEach(textarea => {
                    if (textarea.value) {
                        instructions.push(textarea.value);
                    }
                });
                console.log("Instructions:", instructions);

                // Provide user feedback (using a modal or notification in a real app, not alert())
                // For this example, we'll just log to console.
                console.log("Recipe saved successfully (simulated)!");

                // Optionally, clear the form after submission
                // recipeForm.reset();
                // Reset dynamic rows if needed
            });
        }

        // Add new ingredient to database (simulated)
        const addIngredientToDbBtn = document.getElementById('add-to-database-btn');
        if (addIngredientToDbBtn) {
            addIngredientToDbBtn.addEventListener('click', () => {
                const newIngredientName = document.getElementById('new-ingredient-name').value.trim();
                const newIngredientUnit = document.getElementById('new-ingredient-unit').value.trim();

                if (newIngredientName) {
                    const newIngredient = {
                        name: newIngredientName,
                        category: "Custom", // Default category for new additions
                        defaultUnit: newIngredientUnit || "N/A"
                    };
                    preloadedIngredients.push(newIngredient); // Add to our in-memory list
                    renderIngredients(preloadedIngredients); // Re-render the list
                    document.getElementById('new-ingredient-name').value = ''; // Clear input
                    document.getElementById('new-ingredient-unit').value = ''; // Clear input
                    console.log(`Added "${newIngredient.name}" to database.`);
                } else {
                    console.log("Ingredient name cannot be empty.");
                }
            });
        }


        // Placeholder for scaling and conversion output
        // In a real app, these would involve actual calculations
        const scaleButton = document.querySelector('#tools button.bg-blue-600');
        if (scaleButton) {
            scaleButton.addEventListener('click', () => {
                document.getElementById('scaled-recipe-output').classList.remove('hidden');
                // Logic to perform scaling and update the list items would go here
            });
        }

        const convertButton = document.querySelectorAll('#tools button.bg-blue-600')[1]; // Get the second blue button
        if (convertButton) {
            convertButton.addEventListener('click', () => {
                document.getElementById('conversion-output').classList.remove('hidden');
                // Logic to perform unit conversion and update the result would go here
                document.getElementById('converted-unit').textContent = document.getElementById('convert-to').value;
            });
        }

    </script>
</body>
</html>
