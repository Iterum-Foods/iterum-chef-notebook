<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Iterum R&D Chef Notebook</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Firebase SDK CDN imports -->
    <script type="module">
        // Import the functions you need from the SDKs you need
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, doc, setDoc, onSnapshot, collection, query, where, addDoc, getDocs, deleteDoc } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
        import { getAnalytics } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-analytics.js"; // Added analytics import

        // Global Firebase variables for use across the script
        let app;
        let db;
        let auth;
        let userId = null; // Will store the current user's ID
        let currentMasterIngredientList = []; // Local cache for master ingredients
        let currentPantryInventory = {}; // Local cache for pantry inventory
        let sharedPreloadedIngredients = []; // Local cache for shared preloaded ingredients

        // These variables are provided by the Canvas environment, but we'll prioritize the hardcoded projectId
        // for Firestore paths when a firebaseConfig is explicitly provided by the user.
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

        // Your web app's Firebase configuration (updated with user provided values)
        // For Firebase JS SDK v7.20.0 and later, measurementId is optional
        const firebaseConfig = {
            apiKey: "AIzaSyCcRO0lVAdqwhhq_S26_BUHvDM88eEpWA8",
            authDomain: "culinaryhubapp.firebaseapp.com",
            projectId: "culinaryhubapp", // This is your explicit project ID
            storageBucket: "culinaryhubapp.firebasestorage.app",
            messagingSenderId: "1085951874052",
            appId: "1:1085951874052:web:0a9d05113347cd0c139151",
            measurementId: "G-MNKVK1EQ7K"
        };

        // Use the projectId from firebaseConfig for Firestore collection paths
        const firebaseProjectId = firebaseConfig.projectId;


        // Preloaded ingredients from Ingredient Database-Sheet1.csv.txt
        const initialSpecialtyProduceIngredients = [
            { name: "All-Purpose Flour", defaultUnit: "grams", category: "Pantry" },
            { name: "Granulated Sugar", defaultUnit: "grams", category: "Pantry" },
            { name: "Salt", defaultUnit: "grams", category: "Pantry" },
            { name: "Black Pepper", defaultUnit: "grams", category: "Pantry" },
            { name: "Unsalted Butter", defaultUnit: "grams", category: "Dairy" },
            { name: "Large Eggs", defaultUnit: "each", category: "Dairy" },
            { name: "Whole Milk", defaultUnit: "ml", category: "Dairy" },
            { name: "Olive Oil", defaultUnit: "ml", category: "Oils/Fats" },
            { name: "Garlic", defaultUnit: "cloves", category: "Produce" },
            { name: "Onion", defaultUnit: "each", category: "Produce" },
            { name: "Chicken Breast", defaultUnit: "grams", category: "Protein" },
            { name: "Ground Beef", defaultUnit: "grams", category: "Protein" },
            { name: "Basmati Rice", defaultUnit: "grams", category: "Grains" },
            { name: "Pasta (Spaghetti)", defaultUnit: "grams", category: "Grains" },
            { name: "Tomatoes", defaultUnit: "each", category: "Produce" },
            { name: "Potatoes (Russet)", defaultUnit: "each", category: "Produce" },
            { name: "Carrots", defaultUnit: "each", category: "Produce" },
            { name: "Celery", defaultUnit: "stalks", category: "Produce" },
            { name: "Bell Pepper (Green)", defaultUnit: "each", category: "Produce" },
            { name: "Lemon", defaultUnit: "each", category: "Produce" },
            { name: "Lime", defaultUnit: "each", category: "Produce" },
            { name: "Cilantro", defaultUnit: "grams", category: "Herbs" },
            { name: "Parsley", defaultUnit: "grams", category: "Herbs" },
            { name: "Thyme", defaultUnit: "grams", category: "Herbs" },
            { name: "Rosemary", defaultUnit: "grams", category: "Herbs" },
            { name: "Bay Leaf", defaultUnit: "each", category: "Herbs" },
            { name: "Cumin (Ground)", defaultUnit: "grams", category: "Spices" },
            { name: "Coriander (Ground)", defaultUnit: "grams", category: "Spices" },
            { name: "Paprika", defaultUnit: "grams", category: "Spices" },
            { name: "Chili Powder", defaultUnit: "grams", category: "Spices" },
            { name: "Oregano", defaultUnit: "grams", category: "Herbs" },
            { name: "Basil", defaultUnit: "grams", category: "Herbs" },
            { name: "Ginger", defaultUnit: "grams", category: "Produce" },
            { name: "Soy Sauce", defaultUnit: "ml", category: "Condiments" },
            { name: "Vinegar (White)", defaultUnit: "ml", category: "Condiments" },
            { name: "Balsamic Vinegar", defaultUnit: "ml", category: "Condiments" },
            { name: "Dijon Mustard", defaultUnit: "grams", category: "Condiments" },
            { name: "Honey", defaultUnit: "grams", category: "Sweeteners" },
            { name: "Maple Syrup", defaultUnit: "ml", category: "Sweeteners" },
            { name: "Bread (Sourdough)", defaultUnit: "slices", category: "Baked Goods" },
            { name: "Cheddar Cheese", defaultUnit: "grams", category: "Dairy" },
            { name: "Parmesan Cheese", defaultUnit: "grams", category: "Dairy" },
            { name: "Yogurt (Plain)", defaultUnit: "grams", category: "Dairy" },
            { name: "Milk (Almond)", defaultUnit: "ml", category: "Dairy Alternatives" },
            { name: "Tofu", defaultUnit: "grams", category: "Protein" },
            { name: "Lentils (Brown)", defaultUnit: "grams", category: "Legumes" },
            { name: "Black Beans", defaultUnit: "grams", category: "Legumes" },
            { name: "Chickpeas", defaultUnit: "grams", category: "Legumes" },
            { name: "Quinoa", defaultUnit: "grams", category: "Grains" },
            { name: "Oats (Rolled)", defaultUnit: "grams", category: "Grains" },
            { name: "Peanut Butter", defaultUnit: "grams", category: "Pantry" },
            { name: "Almonds", defaultUnit: "grams", category: "Nuts" },
            { name: "Walnuts", defaultUnit: "grams", category: "Nuts" },
            { name: "Vanilla Extract", defaultUnit: "ml", category: "Flavorings" },
            { name: "Baking Soda", defaultUnit: "grams", category: "Leavening Agents" },
            { name: "Baking Powder", defaultUnit: "grams", category: "Leavening Agents" },
            { name: "Yeast (Active Dry)", defaultUnit: "grams", category: "Leavening Agents" },
            { name: "Cocoa Powder", defaultUnit: "grams", category: "Baking/Dessert" },
            { name: "Chocolate Chips", defaultUnit: "grams", category: "Baking/Dessert" },
            { name: "Coffee", defaultUnit: "grams", category: "Beverages" },
            { name: "Tea (Black)", defaultUnit: "grams", category: "Beverages" },
            { name: "Green Tea", defaultUnit: "grams", category: "Beverages" },
            { name: "Orange Juice", defaultUnit: "ml", category: "Beverages" },
            { name: "Apple Juice", defaultUnit: "ml", category: "Beverages" },
            { name: "Coconut Milk", defaultUnit: "ml", category: "Pantry" },
            { name: "Tomato Paste", defaultUnit: "grams", category: "Pantry" },
            { name: "Chicken Broth", defaultUnit: "ml", category: "Pantry" },
            { name: "Vegetable Broth", defaultUnit: "ml", category: "Pantry" },
            { name: "Beef Broth", defaultUnit: "ml", category: "Pantry" },
            { name: "Flour (Bread)", defaultUnit: "grams", category: "Pantry" },
            { name: "Sugar (Brown)", defaultUnit: "grams", category: "Pantry" },
            { name: "Powdered Sugar", defaultUnit: "grams", category: "Pantry" },
            { name: "Cinnamon", defaultUnit: "grams", category: "Spices" },
            { name: "Nutmeg", defaultUnit: "grams", category: "Spices" },
            { name: "Cloves", defaultUnit: "grams", category: "Spices" },
            { name: "Allspice", defaultUnit: "grams", category: "Spices" },
            { name: "Mustard Powder", defaultUnit: "grams", category: "Spices" },
            { name: "Curry Powder", defaultUnit: "grams", category: "Spices" },
            { name: "Turmeric", defaultUnit: "grams", category: "Spices" },
            { name: "Chili Flakes", defaultUnit: "grams", category: "Spices" },
            { name: "Red Wine", defaultUnit: "ml", category: "Beverages" },
            { name: "White Wine", defaultUnit: "ml", category: "Beverages" },
            { name: "Beer", defaultUnit: "ml", category: "Beverages" },
            { name: "Heavy Cream", defaultUnit: "ml", category: "Dairy" },
            { name: "Sour Cream", defaultUnit: "grams", category: "Dairy" },
            { name: "Cream Cheese", defaultUnit: "grams", category: "Dairy" },
            { name: "Feta Cheese", defaultUnit: "grams", category: "Dairy" },
            { name: "Mozzarella Cheese", defaultUnit: "grams", category: "Dairy" },
            { name: "Ricotta Cheese", defaultUnit: "grams", category: "Dairy" },
            { name: "Goat Cheese", defaultUnit: "grams", category: "Dairy" },
            { name: "Buttermilk", defaultUnit: "ml", category: "Dairy" },
            { name: "Shrimp", defaultUnit: "grams", category: "Seafood" },
            { name: "Salmon Fillet", defaultUnit: "grams", category: "Seafood" },
            { name: "Cod Fillet", defaultUnit: "grams", category: "Seafood" },
            { name: "Tuna (Canned)", defaultUnit: "grams", category: "Seafood" },
            { name: "Anchovy Paste", defaultUnit: "grams", category: "Condiments" },
            { name: "Capers", defaultUnit: "grams", category: "Condiments" },
            { name: "Olives", defaultUnit: "grams", category: "Produce" },
            { name: "Canned Tomatoes", defaultUnit: "grams", category: "Pantry" },
            { name: "Artichoke Hearts (Canned)", defaultUnit: "grams", category: "Pantry" },
            { name: "Spinach", defaultUnit: "grams", category: "Produce" },
            { name: "Kale", defaultUnit: "grams", category: "Produce" },
            { name: "Broccoli", defaultUnit: "grams", category: "Produce" },
            { name: "Cauliflower", defaultUnit: "grams", category: "Produce" },
            { name: "Green Beans", defaultUnit: "grams", category: "Produce" },
            { name: "Asparagus", defaultUnit: "grams", category: "Produce" },
            { name: "Corn (Canned)", defaultUnit: "grams", category: "Pantry" },
            { name: "Peas (Frozen)", defaultUnit: "grams", category: "Frozen" },
            { name: "Mushrooms (Cremini)", defaultUnit: "grams", category: "Produce" },
            { name: "Zucchini", defaultUnit: "each", category: "Produce" },
            { name: "Cucumber", defaultUnit: "each", category: "Produce" },
            { name: "Avocado", defaultUnit: "each", category: "Produce" },
            { name: "Lettuce (Romaine)", defaultUnit: "head", category: "Produce" },
            { name: "Spinach (Frozen)", defaultUnit: "grams", category: "Frozen" },
            { name: "Pesto", defaultUnit: "grams", category: "Condiments" },
            { name: "Hummus", defaultUnit: "grams", category: "Condiments" },
            { name: "Tortillas (Corn)", defaultUnit: "each", category: "Baked Goods" },
            { name: "Tortillas (Flour)", defaultUnit: "each", category: "Baked Goods" },
            { name: "Breadcrumbs", defaultUnit: "grams", category: "Pantry" },
            { name: "Mayonnaise", defaultUnit: "grams", category: "Condiments" },
            { name: "Ketchup", defaultUnit: "ml", category: "Condiments" },
            { name: "Hot Sauce", defaultUnit: "ml", category: "Condiments" },
            { name: "Worcestershire Sauce", defaultUnit: "ml", category: "Condiments" },
            { name: "Sriracha", defaultUnit: "ml", category: "Condiments" },
            { name: "Tahini", defaultUnit: "grams", category: "Condiments" },
            { name: "Couscous", defaultUnit: "grams", category: "Grains" },
            { name: "Bulgur", defaultUnit: "grams", category: "Grains" },
            { name: "Farro", defaultUnit: "grams", category: "Grains" },
            { name: "Oat Milk", defaultUnit: "ml", category: "Dairy Alternatives" },
            { name: "Coconut Cream", defaultUnit: "ml", category: "Pantry" },
            { name: "Rice Vinegar", defaultUnit: "ml", category: "Condiments" },
            { name: "Sesame Oil", defaultUnit: "ml", category: "Oils/Fats" },
            { name: "Noodles (Ramen)", defaultUnit: "grams", category: "Grains" },
            { name: "Soy Milk", defaultUnit: "ml", category: "Dairy Alternatives" },
            { name: "Dates (Medjool)", defaultUnit: "each", category: "Fruit" },
            { name: "Dried Cranberries", defaultUnit: "grams", category: "Dried Fruit" },
            { name: "Raisins", defaultUnit: "grams", category: "Dried Fruit" },
            { name: "Prunes", defaultUnit: "grams", category: "Dried Fruit" },
            { name: "Apricots (Dried)", defaultUnit: "grams", category: "Dried Fruit" },
            { name: "Hazelnuts", defaultUnit: "grams", category: "Nuts" },
            { name: "Pecans", defaultUnit: "grams", category: "Nuts" },
            { name: "Cashews", defaultUnit: "grams", category: "Nuts" },
            { name: "Sunflower Seeds", defaultUnit: "grams", category: "Nuts/Seeds" },
            { name: "Pumpkin Seeds", defaultUnit: "grams", category: "Nuts/Seeds" },
            { name: "Chia Seeds", defaultUnit: "grams", category: "Seeds" },
            { name: "Flax Seeds", defaultUnit: "grams", category: "Seeds" },
            { name: "Sesame Seeds", defaultUnit: "grams", category: "Seeds" },
            { name: "Poppy Seeds", defaultUnit: "grams", category: "Seeds" },
            { name: "Cornstarch", defaultUnit: "grams", category: "Thickeners" },
            { name: "Xanthan Gum", defaultUnit: "grams", category: "Thickeners" },
            { name: "Agar-Agar", defaultUnit: "grams", category: "Thickeners" },
            { name: "Gelatin", defaultUnit: "grams", category: "Thickeners" },
            { name: "Food Coloring", defaultUnit: "ml", category: "Flavorings" },
            { name: "Almond Flour", defaultUnit: "grams", category: "Baking/Dessert" },
            { name: "Coconut Flour", defaultUnit: "grams", category: "Baking/Dessert" },
            { name: "Xylitol", defaultUnit: "grams", category: "Sweeteners" },
            { name: "Stevia", defaultUnit: "grams", category: "Sweeteners" },
            { name: "Agave Nectar", defaultUnit: "ml", category: "Sweeteners" },
            { name: "Corn Syrup", defaultUnit: "ml", category: "Sweeteners" },
            { name: "Molasses", defaultUnit: "ml", category: "Sweeteners" },
            { name: "Yeast (Instant)", defaultUnit: "grams", category: "Leavening Agents" },
            { name: "Sourdough Starter", defaultUnit: "grams", category: "Leavening Agents" },
            { name: "Dark Chocolate", defaultUnit: "grams", category: "Baking/Dessert" },
            { name: "White Chocolate", defaultUnit: "grams", category: "Baking/Dessert" },
            { name: "Butterscotch Chips", defaultUnit: "grams", category: "Baking/Dessert" },
            { name: "Sprinkles", defaultUnit: "grams", category: "Baking/Dessert" },
            { name: "Confectioners Glaze", defaultUnit: "ml", category: "Baking/Dessert" },
            { name: "Edible Glitter", defaultUnit: "grams", category: "Baking/Dessert" },
            { name: "Fondant", defaultUnit: "grams", category: "Baking/Dessert" },
            { name: "Marzipan", defaultUnit: "grams", category: "Baking/Dessert" },
            { name: "Glycerin", defaultUnit: "ml", category: "Baking/Dessert" },
            { name: "Lecithin", defaultUnit: "grams", category: "Baking/Dessert" },
            { name: "Invert Sugar", defaultUnit: "grams", category: "Sweeteners" },
            { name: "Glucose Syrup", defaultUnit: "ml", category: "Sweeteners" },
            { name: "Dextrose", defaultUnit: "grams", category: "Sweeteners" },
            { name: "Maltodextrin", defaultUnit: "grams", category: "Sweeteners" },
            { name: "Erythritol", defaultUnit: "grams", category: "Sweeteners" },
            { name: "Monk Fruit Extract", defaultUnit: "grams", category: "Sweeteners" },
            { name: "Saccharin", defaultUnit: "grams", category: "Sweeteners" },
            { name: "Aspartame", defaultUnit: "grams", category: "Sweeteners" },
            { name: "Sucralose", defaultUnit: "grams", category: "Sweeteners" },
            { name: "Acesulfame Potassium", defaultUnit: "grams", category: "Sweeteners" },
            { name: "Citric Acid", defaultUnit: "grams", category: "Acids" },
            { name: "Lactic Acid", defaultUnit: "grams", category: "Acids" },
            { name: "Malic Acid", defaultUnit: "grams", category: "Acids" },
            { name: "Tartaric Acid", defaultUnit: "grams", category: "Acids" },
            { name: "Ascorbic Acid", defaultUnit: "grams", category: "Acids" },
            { name: "Sodium Bicarbonate", defaultUnit: "grams", category: "Leavening Agents" },
            { name: "Potassium Bicarbonate", defaultUnit: "grams", category: "Leavening Agents" },
            { name: "Ammonium Bicarbonate", defaultUnit: "grams", category: "Leavening Agents" },
            { name: "Calcium Carbonate", defaultUnit: "grams", category: "Supplements" },
            { name: "Magnesium Carbonate", defaultUnit: "grams", category: "Supplements" },
            { name: "Sodium Citrate", defaultUnit: "grams", category: "Salts" },
            { name: "Potassium Citrate", defaultUnit: "grams", category: "Salts" },
            { name: "Calcium Chloride", defaultUnit: "grams", category: "Salts" },
            { name: "Sodium Chloride", defaultUnit: "grams", category: "Salts" },
            { name: "Potassium Chloride", defaultUnit: "grams", category: "Salts" },
            { name: "Sodium Gluconate", defaultUnit: "grams", category: "Salts" },
            { name: "Potassium Gluconate", defaultUnit: "grams", category: "Salts" },
            { name: "Calcium Gluconate", defaultUnit: "grams", category: "Salts" },
            { name: "Sodium Lactate", defaultUnit: "ml", category: "Salts" },
            { name: "Potassium Lactate", defaultUnit: "ml", category: "Salts" },
            { name: "Calcium Lactate", defaultUnit: "grams", category: "Salts" },
            { name: "Sodium Acetate", defaultUnit: "grams", category: "Salts" },
            { name: "Potassium Acetate", defaultUnit: "grams", category: "Salts" },
            { name: "Calcium Acetate", defaultUnit: "grams", category: "Salts" },
            { name: "Sodium Benzoate", defaultUnit: "grams", category: "Preservatives" },
            { name: "Potassium Sorbate", defaultUnit: "grams", category: "Preservatives" },
            { name: "Calcium Propionate", defaultUnit: "grams", category: "Preservatives" },
            { name: "Sodium Nitrite", defaultUnit: "grams", category: "Preservatives" },
            { name: "Potassium Nitrite", defaultUnit: "grams", category: "Preservatives" },
            { name: "Sodium Sulfite", defaultUnit: "grams", category: "Preservatives" },
            { name: "Potassium Sulfite", defaultUnit: "grams", category: "Preservatives" },
            { name: "Sorbic Acid", defaultUnit: "grams", category: "Preservatives" },
            { name: "Benzoic Acid", defaultUnit: "grams", category: "Preservatives" },
            { name: "Propionic Acid", defaultUnit: "ml", category: "Preservatives" },
            { name: "Nisin", defaultUnit: "grams", category: "Preservatives" },
            { name: "Natamycin", defaultUnit: "grams", category: "Preservatives" },
            { name: "Lysozyme", defaultUnit: "grams", category: "Preservatives" },
            { name: "Rennet", defaultUnit: "ml", category: "Enzymes" },
            { name: "Amylase", defaultUnit: "grams", category: "Enzymes" },
            { name: "Protease", defaultUnit: "grams", category: "Enzymes" },
            { name: "Lipase", defaultUnit: "grams", category: "Enzymes" },
            { name: "Glucose Oxidase", defaultUnit: "grams", category: "Enzymes" },
            { name: "Pectinase", defaultUnit: "grams", category: "Enzymes" },
            { name: "Cellulase", defaultUnit: "grams", category: "Enzymes" },
            { name: "Lactase", defaultUnit: "grams", category: "Enzymes" },
            { name: "Transglutaminase", defaultUnit: "grams", category: "Enzymes" },
            { name: "Ascorbate Oxidase", defaultUnit: "grams", category: "Enzymes" },
            { name: "Bromelain", defaultUnit: "grams", category: "Enzymes" },
            { name: "Papain", defaultUnit: "grams", category: "Enzymes" },
            { name: "Ficin", defaultUnit: "grams", category: "Enzymes" },
            { name: "Gelatinase", defaultUnit: "grams", category: "Enzymes" },
            { name: "Glucanase", defaultUnit: "grams", category: "Enzymes" },
            { name: "Xylanase", defaultUnit: "grams", category: "Enzymes" },
            { name: "Phytase", defaultUnit: "grams", category: "Enzymes" },
            { name: "Hemicellulase", defaultUnit: "grams", category: "Enzymes" },
            { name: "Pullulanase", defaultUnit: "grams", category: "Enzymes" }
        ];

        // Function to render ingredients (combines shared and user-specific)
        const renderIngredients = (ingredientsToRender) => {
            const existingIngredientsContainer = document.getElementById('existing-ingredients-container');
            if (existingIngredientsContainer) {
                existingIngredientsContainer.innerHTML = ''; // Clear existing content
                // Ensure unique ingredients by combining and de-duplicating all available ingredients
                const allIngredients = [...sharedPreloadedIngredients, ...currentMasterIngredientList];
                const uniqueIngredientsMap = new Map();
                allIngredients.forEach(ing => {
                    uniqueIngredientsMap.set(ing.name.toLowerCase(), ing);
                });
                const uniqueIngredients = Array.from(uniqueIngredientsMap.values());

                // Filter based on the `ingredientsToRender` (e.g., from search results)
                const finalIngredientsToDisplay = ingredientsToRender.filter(ingredient =>
                    uniqueIngredients.some(ui => ui.name === ingredient.name)
                );

                finalIngredientsToDisplay.forEach(ingredient => {
                    const ingredientDiv = document.createElement('div');
                    ingredientDiv.className = 'bg-gray-100 rounded-lg p-3 shadow-sm flex justify-between items-center';
                    ingredientDiv.innerHTML = `
                        <span class="font-medium">${ingredient.name} (${ingredient.defaultUnit || 'N/A'})</span>
                        <span class="text-sm text-gray-600">Category: ${ingredient.category || 'N/A'}</span>
                    `;
                    existingIngredientsContainer.appendChild(ingredientDiv);
                });
            }
        };

        // Function to render pantry
        const renderPantry = () => {
            const pantryContainer = document.querySelector('#pantry-inventory .grid');
            if (pantryContainer) {
                pantryContainer.innerHTML = '';
                if (Object.keys(currentPantryInventory).length === 0) {
                    pantryContainer.innerHTML = '<p class="text-gray-600 col-span-full text-center">Your pantry is empty.</p>';
                } else {
                    for (const key in currentPantryInventory) {
                        const item = currentPantryInventory[key];
                        const pantryDiv = document.createElement('div');
                        pantryDiv.className = 'bg-gray-100 rounded-lg p-3 shadow-sm flex justify-between items-center';
                        pantryDiv.innerHTML = `
                            <span class="font-medium">${item.name}</span>
                            <span class="text-gray-600">${item.quantity} ${item.unit}</span>
                        `;
                        pantryContainer.appendChild(pantryDiv);
                    }
                }
            }
        };

        // Initialize Firebase
        const initializeFirebase = async () => {
            app = initializeApp(firebaseConfig);
            const analytics = getAnalytics(app); // Initialize analytics here
            db = getFirestore(app);
            auth = getAuth(app);

            // Authentication listener
            onAuthStateChanged(auth, async (user) => {
                if (user) {
                    userId = user.uid;
                    console.log("Authenticated with user ID:", userId);
                    document.getElementById('loading-message').textContent = `Loading data for user: ${userId}...`;
                    await loadSharedPreloadedIngredients();
                    await loadUserData();
                    document.getElementById('loading-screen').classList.add('hidden');
                    document.getElementById('main-app-content').classList.remove('hidden');
                } else {
                    userId = null;
                    console.log("No user is signed in.");
                    document.getElementById('loading-message').textContent = 'Please select or enter a user ID.';
                }
            });

            // Always try to sign in anonymously first when using a custom firebaseConfig.
            // This prevents issues with '__initial_auth_token' if it's not compatible with the user's project.
            try {
                await signInAnonymously(auth);
            } catch (error) {
                console.error("Firebase authentication error:", error);
                document.getElementById('loading-message').textContent = `Authentication error: ${error.message}`;
            }
        };

        // Function to load shared preloaded ingredients from Firestore
        const loadSharedPreloadedIngredients = async () => {
            if (!db) {
                console.error("Firestore is not initialized.");
                return;
            }
            // Using firebaseProjectId from firebaseConfig directly
            const sharedCollectionRef = collection(db, `${firebaseProjectId}/public/data/preloadedIngredients`);
            try {
                const querySnapshot = await getDocs(sharedCollectionRef);
                if (querySnapshot.empty) {
                    console.log("Seeding shared preloaded ingredients...");
                    // Add batching if the list is very long to avoid hitting write limits
                    for (const ingredient of initialSpecialtyProduceIngredients) {
                        await setDoc(doc(sharedCollectionRef, ingredient.name.replace(/ /g, '_').toLowerCase()), ingredient);
                    }
                    sharedPreloadedIngredients = initialSpecialtyProduceIngredients;
                    renderIngredients(sharedPreloadedIngredients); // Render after seeding
                } else {
                    sharedPreloadedIngredients = querySnapshot.docs.map(doc => doc.data());
                    renderIngredients(sharedPreloadedIngredients); // Render after loading
                }
                console.log("Shared preloaded ingredients loaded:", sharedPreloadedIngredients.length);
            } catch (error) {
                console.error("Error loading shared preloaded ingredients:", error);
                // IMPORTANT: If you are seeing "Missing or insufficient permissions" here,
                // it is likely due to your Firestore Security Rules.
                // Ensure your rules allow 'read' access to the 'preloadedIngredients' collection
                // even for unauthenticated users, if you intend for this data to be publicly available.
                // Example rule for public read, authenticated write:
                // match /{projectId}/public/data/preloadedIngredients/{ingredientId} { // Use your project ID here
                //   allow read: true;
                //   allow write: if request.auth != null;
                // }
            }
        };

        // Function to load user-specific data from Firestore
        const loadUserData = async () => {
            if (!db || !userId) {
                console.error("Firestore or User ID is not ready.");
                return;
            }

            // Listen for user's master ingredient list
            const userMasterIngredientsRef = collection(db, `${firebaseProjectId}/users/${userId}/masterIngredients`);
            onSnapshot(userMasterIngredientsRef, (snapshot) => {
                currentMasterIngredientList = snapshot.docs.map(doc => doc.data());
                console.log("User's master ingredients loaded:", currentMasterIngredientList.length);
                renderIngredients(sharedPreloadedIngredients.concat(currentMasterIngredientList)); // Combine and render
            }, (error) => {
                console.error("Error listening to user master ingredients:", error);
            });

            // Listen for user's pantry inventory
            const userPantryRef = collection(db, `${firebaseProjectId}/users/${userId}/pantry`);
            onSnapshot(userPantryRef, (snapshot) => {
                currentPantryInventory = {};
                snapshot.docs.forEach(doc => {
                    const data = doc.data();
                    currentPantryInventory[data.name] = data; // Store as map for easy access
                });
                console.log("User's pantry inventory loaded:", Object.keys(currentPantryInventory).length);
                renderPantry(); // Re-render pantry display
            }, (error) => {
                console.error("Error listening to user pantry:", error);
            });
        };

        // Function to save a new ingredient to user's master list
        const saveNewMasterIngredient = async (ingredient) => {
            if (!db || !userId) {
                console.error("Firestore or User ID is not ready. Cannot save ingredient.");
                return;
            }
            try {
                const userMasterIngredientsRef = collection(db, `${firebaseProjectId}/users/${userId}/masterIngredients`);
                // Use the ingredient name as part of the document ID for easier lookup
                const docRef = doc(userMasterIngredientsRef, ingredient.name.replace(/ /g, '_').toLowerCase());
                await setDoc(docRef, ingredient);
                console.log("Ingredient added to user's master list:", ingredient.name);
            } catch (error) {
                console.error("Error adding ingredient to user's master list:", error);
            }
        };

        // Function to update pantry stock
        const savePantryItem = async (ingredientName, quantity, unit) => {
            if (!db || !userId) {
                console.error("Firestore or User ID is not ready. Cannot update pantry.");
                return;
            }
            try {
                const userPantryRef = collection(db, `${firebaseProjectId}/users/${userId}/pantry`);
                const docRef = doc(userPantryRef, ingredientName.replace(/ /g, '_').toLowerCase());
                await setDoc(docRef, {
                    name: ingredientName,
                    quantity: parseFloat(quantity),
                    unit: unit,
                    last_updated: new Date().toISOString()
                }, { merge: true }); // Use merge to update existing or create new
                console.log(`Pantry updated for ${ingredientName}: ${quantity} ${unit}`);
            } catch (error) {
                console.error("Error updating pantry:", error);
            }
        };

        // Function to remove pantry item (placeholder for future UI)
        const removePantryItem = async (ingredientName) => {
             if (!db || !userId) {
                console.error("Firestore or User ID is not ready. Cannot remove pantry item.");
                return;
            }
            try {
                const userPantryRef = collection(db, `${firebaseProjectId}/users/${userId}/pantry`);
                const docRef = doc(userPantryRef, ingredientName.replace(/ /g, '_').toLowerCase());
                await deleteDoc(docRef);
                console.log(`Pantry item removed: ${ingredientName}`);
            } catch (error) {
                console.error("Error removing pantry item:", error);
            }
        };


        document.addEventListener('DOMContentLoaded', () => {
            const loadingScreen = document.getElementById('loading-screen');
            const mainAppContent = document.getElementById('main-app-content');
            const enterAppButton = document.getElementById('enter-app-button');
            const userIdInput = document.getElementById('user-id-input');
            const loadingMessage = document.getElementById('loading-message');

            // Initial state: show loading screen
            loadingScreen.classList.remove('hidden');
            mainAppContent.classList.add('hidden');
            loadingMessage.classList.add('hidden'); // Hide until user interacts

            enterAppButton.addEventListener('click', async () => {
                let requestedUserId = userIdInput.value.trim();
                loadingMessage.classList.remove('hidden');
                loadingMessage.textContent = 'Authenticating...';

                try {
                    if (requestedUserId) {
                        // For this demo, we simulate different users by setting the userId
                        // directly after anonymous sign-in or by reusing the initialAuthToken.
                        // A more robust solution would be to use Firebase's email/password or Google sign-in.
                        await signInAnonymously(auth); // Ensure an auth session exists
                        userId = requestedUserId; // Override with the requested ID for data partitioning
                        console.log("Simulating user selection with ID:", userId);
                        document.getElementById('loading-message').textContent = `Loading data for user: ${userId}...`;
                        await loadSharedPreloadedIngredients();
                        await loadUserData();
                        loadingScreen.classList.add('hidden');
                        mainAppContent.classList.remove('hidden');
                    } else {
                        // If no specific user ID requested, proceed with initial anonymous sign-in flow
                        if (!auth.currentUser) {
                             await signInAnonymously(auth);
                        }
                        // The onAuthStateChanged listener will handle loading and UI display
                    }
                } catch (error) {
                    console.error("Error during user selection/authentication:", error);
                    loadingMessage.textContent = `Error: ${error.message}. Please try again.`;
                }
            });

            initializeFirebase(); // Start Firebase initialization on DOMContentLoaded

            // Rest of your existing JavaScript for UI interactions
            // These functions will now rely on global `currentMasterIngredientList`, `currentPantryInventory`, and `sharedPreloadedIngredients`
            // and trigger Firebase save/update functions.

            // Mobile Menu Toggle
            const mobileMenuButton = document.getElementById('mobile-menu-button');
            const mobileMenu = document.getElementById('mobile-menu');

            if (mobileMenuButton && mobileMenu) {
                mobileMenuButton.addEventListener('click', () => {
                    mobileMenu.classList.toggle('hidden');
                });

                // Close mobile menu when a link is clicked
                mobileMenu.querySelectorAll('a').forEach(link => {
                    link.addEventListener('click', () => {
                        mobileMenu.classList.add('hidden');
                    });
                });
            }


            // Search functionality for ingredients
            const searchIngredientsInput = document.getElementById('search-ingredients');
            if (searchIngredientsInput) {
                searchIngredientsInput.addEventListener('keyup', (event) => {
                    const searchTerm = event.target.value.toLowerCase();
                    const allIngredients = [...sharedPreloadedIngredients, ...currentMasterIngredientList];
                    const uniqueIngredientsMap = new Map(); // Use a Map to ensure uniqueness
                    allIngredients.forEach(ing => {
                        uniqueIngredientsMap.set(ing.name.toLowerCase(), ing);
                    });
                    const uniqueIngredients = Array.from(uniqueIngredientsMap.values());


                    const filteredIngredients = uniqueIngredients.filter(ingredient =>
                        ingredient.name.toLowerCase().includes(searchTerm) ||
                        (ingredient.category && ingredient.category.toLowerCase().includes(searchTerm))
                    );
                    renderIngredients(filteredIngredients);
                });
            }

            // Dynamic Ingredient Rows in Recipe Form
            const ingredientsContainer = document.getElementById('ingredients-container');
            const addIngredientBtn = document.getElementById('add-ingredient-btn');

            const addIngredientRow = () => {
                const newRow = document.createElement('div');
                newRow.className = 'flex flex-col sm:flex-row gap-2';
                newRow.innerHTML = `
                    <input type="text" placeholder="Ingredient Name" class="shadow-sm border rounded-lg py-2 px-3 flex-grow focus:outline-none focus:ring-2 focus:ring-blue-300">
                    <input type="number" placeholder="Quantity" min="0" step="any" class="shadow-sm border rounded-lg py-2 px-3 w-24 focus:outline-none focus:ring-2 focus:ring-blue-300">
                    <select class="shadow-sm border rounded-lg py-2 px-3 w-24 focus:outline-none focus:ring-2 focus:ring-blue-300">
                        <option value="">Unit</option>
                        <option value="g">g</option>
                        <option value="ml">ml</option>
                        <option value="cup">cup</option>
                        <option value="tsp">tsp</option>
                        <option value="tbsp">tbsp</option>
                        <option value="each">each</option>
                    </select>
                    <button type="button" class="remove-ingredient-btn bg-red-100 hover:bg-red-200 text-red-700 p-2 rounded-full transition duration-300 flex items-center justify-center">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5"><path stroke-linecap="round" stroke-linejoin="round" d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.924a2.25 2.25 0 01-2.244-2.077L4.74 5.938m1.588-.59L10.59 1.5l1.044 1.054L15.364 5.21M6.01 6.01l4.477 4.477m-4.477 0l4.477-4.477"></path></svg>
                    </button>
                `;
                ingredientsContainer.appendChild(newRow);
            };

            addIngredientBtn.addEventListener('click', addIngredientRow);

            // Remove Ingredient Row (event delegation)
            ingredientsContainer.addEventListener('click', (event) => {
                if (event.target.closest('.remove-ingredient-btn')) {
                    if (ingredientsContainer.children.length > 1) {
                        event.target.closest('.flex.flex-col.sm\\:flex-row.gap-2').remove();
                    } else {
                        console.log("Cannot remove the last ingredient row.");
                    }
                }
            });

            // Dynamic Instruction Steps in Recipe Form
            const instructionsContainer = document.getElementById('instructions-container');
            const addInstructionBtn = document.getElementById('add-instruction-btn');

            const addInstructionStep = () => {
                const newStep = document.createElement('div');
                newStep.className = 'flex gap-2';
                newStep.innerHTML = `
                    <textarea placeholder="Step ${instructionsContainer.children.length + 1}: Describe this step..." rows="2" class="shadow-sm border rounded-lg py-2 px-3 flex-grow focus:outline-none focus:ring-2 focus:ring-blue-300"></textarea>
                    <button type="button" class="remove-instruction-btn bg-red-100 hover:bg-red-200 text-red-700 p-2 rounded-full transition duration-300 flex items-center justify-center">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5"><path stroke-linecap="round" stroke-linejoin="round" d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.924a2.25 2.25 0 01-2.244-2.077L4.74 5.938m1.588-.59L10.59 1.5l1.044 1.054L15.364 5.21M6.01 6.01l4.477 4.477m-4.477 0l4.477-4.477"></path></svg>
                    </button>
                `;
                instructionsContainer.appendChild(newStep);
            };

            addInstructionBtn.addEventListener('click', addInstructionStep);

            // Remove Instruction Step (event delegation)
            instructionsContainer.addEventListener('click', (event) => {
                if (event.target.closest('.remove-instruction-btn')) {
                    if (instructionsContainer.children.length > 1) {
                        event.target.closest('.flex.gap-2').remove();
                        Array.from(instructionsContainer.children).forEach((stepDiv, index) => {
                            const textarea = stepDiv.querySelector('textarea');
                            if (textarea) {
                                textarea.placeholder = `Step ${index + 1}: Describe this step...`;
                            }
                        });
                    } else {
                        console.log("Cannot remove the last instruction step.");
                    }
                }
            });

            // Basic form submission simulation (for demonstration)
            const recipeForm = document.getElementById('recipe-form');
            if (recipeForm) {
                recipeForm.addEventListener('submit', (event) => {
                    event.preventDefault();
                    console.log("Recipe data submitted!");
                    console.log("Recipe Name:", document.getElementById('recipe-name').value);
                    console.log("Description:", document.getElementById('recipe-description').value);

                    const ingredients = [];
                    ingredientsContainer.querySelectorAll('.flex.flex-col.sm\\:flex-row.gap-2').forEach(row => {
                        const name = row.children[0].value;
                        const quantity = row.children[1].value;
                        const unit = row.children[2].value;
                        if (name && quantity && unit) {
                            ingredients.push({ name, quantity, unit });
                        }
                    });
                    console.log("Ingredients:", ingredients);

                    const instructions = [];
                    instructionsContainer.querySelectorAll('.flex.gap-2 textarea').forEach(textarea => {
                        if (textarea.value) {
                            instructions.push(textarea.value);
                        }
                    });
                    console.log("Instructions:", instructions);

                    console.log("Recipe saved successfully (simulated)!");
                });
            }

            // Add new ingredient to user's master database
            const addIngredientToDbBtn = document.getElementById('add-to-database-btn');
            if (addIngredientToDbBtn) {
                addIngredientToDbBtn.addEventListener('click', () => {
                    const newIngredientName = document.getElementById('new-ingredient-name').value.trim();
                    const newIngredientUnit = document.getElementById('new-ingredient-unit').value.trim();
                    const newIngredientCategory = "Custom"; // Or add a select for category

                    if (newIngredientName && userId) {
                        const newIngredient = {
                            name: newIngredientName,
                            category: newIngredientCategory,
                            defaultUnit: newIngredientUnit || "N/A"
                        };
                        saveNewMasterIngredient(newIngredient); // Save to Firestore
                        document.getElementById('new-ingredient-name').value = '';
                        document.getElementById('new-ingredient-unit').value = '';
                    } else {
                        console.log("Ingredient name cannot be empty or user not authenticated.");
                    }
                });
            }

            // Update Pantry Stock button handler
            const updatePantryBtn = document.querySelector('#pantry-inventory button.bg-blue-600');
            if (updatePantryBtn) {
                updatePantryBtn.addEventListener('click', () => {
                    const ingredientNameInput = updatePantryBtn.parentElement.children[0];
                    const quantityInput = updatePantryBtn.parentElement.children[1];
                    const unitSelect = updatePantryBtn.parentElement.children[2];

                    const name = ingredientNameInput.value.trim();
                    const quantity = quantityInput.value;
                    const unit = unitSelect.value;

                    if (name && quantity && unit && userId) {
                        savePantryItem(name, quantity, unit);
                        ingredientNameInput.value = '';
                        quantityInput.value = '';
                        unitSelect.value = '';
                    } else {
                        console.log("Please fill all fields for pantry update or ensure user is authenticated.");
                    }
                });
            }

            // Placeholder for scaling and conversion output
            const scaleButton = document.querySelector('#tools button.bg-blue-600');
            if (scaleButton) {
                scaleButton.addEventListener('click', () => {
                    document.getElementById('scaled-recipe-output').classList.remove('hidden');
                });
            }

            const convertButton = document.querySelectorAll('#tools button.bg-blue-600')[1];
            if (convertButton) {
                convertButton.addEventListener('click', () => {
                    document.getElementById('conversion-output').classList.remove('hidden');
                    document.getElementById('converted-unit').textContent = document.getElementById('convert-to').value;
                });
            }
        });
    </script>
</head>
<body class="bg-gray-50 text-gray-800">

    <!-- Loading/User Selection Screen -->
    <div id="loading-screen" class="fixed inset-0 bg-gradient-to-br from-blue-500 to-indigo-700 flex flex-col items-center justify-center z-50 p-4">
        <div class="bg-white p-8 rounded-xl shadow-2xl max-w-sm w-full text-center">
            <h2 class="text-3xl font-bold text-gray-800 mb-6">Welcome to Iterum R&D</h2>
            <p class="text-gray-600 mb-6">Select your user or enter a new one to begin.</p>

            <div class="mb-6">
                <label for="user-id-input" class="block text-gray-700 text-sm font-bold mb-2">User ID (Optional):</label>
                <input type="text" id="user-id-input" placeholder="e.g., chef_anna or leave blank" class="shadow appearance-none border rounded-lg w-full py-3 px-4 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-300">
            </div>

            <button id="enter-app-button" class="bg-green-600 hover:bg-green-700 text-white font-semibold py-3 px-8 rounded-full shadow-md transition duration-300 transform hover:scale-105">
                Enter App
            </button>
            <p id="loading-message" class="mt-4 text-blue-600 font-medium hidden">Loading data...</p>
        </div>
    </div>

    <!-- Main App Content (Initially hidden) -->
    <div id="main-app-content" class="hidden">
        <!-- Header Section -->
        <header class="bg-white shadow-md py-4">
            <div class="container mx-auto px-4 flex justify-between items-center">
                <!-- Logo/App Title -->
                <a href="#" class="text-2xl font-bold text-blue-700">
                    Iterum R&D Chef Notebook
                </a>
                <!-- Desktop Navigation -->
                <nav class="hidden md:block">
                    <ul class="flex space-x-6">
                        <li><a href="#recipe-management" class="text-gray-700 hover:text-blue-600 transition duration-300 font-medium">Recipe Management</a></li>
                        <li><a href="#ingredient-database" class="text-gray-700 hover:text-blue-600 transition duration-300 font-medium">Ingredient Database</a></li>
                        <li><a href="#pantry-inventory" class="text-gray-700 hover:text-blue-600 transition duration-300 font-medium">Pantry Inventory</a></li>
                        <li><a href="#tools" class="text-gray-700 hover:text-blue-600 transition duration-300 font-medium">Tools</a></li>
                    </ul>
                </nav>
                <!-- Mobile Menu Button -->
                <div class="md:hidden">
                    <button id="mobile-menu-button" class="text-gray-700 hover:text-blue-600 focus:outline-none focus:shadow-outline p-2 rounded-md">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" />
                        </svg>
                    </button>
                    <!-- Mobile Menu Content -->
                    <div id="mobile-menu" class="hidden absolute right-4 mt-2 w-48 bg-white rounded-md shadow-lg py-2 z-10">
                        <a href="#recipe-management" class="block px-4 py-2 text-gray-700 hover:bg-gray-100 hover:text-blue-600 transition duration-300">Recipe Management</a>
                        <a href="#ingredient-database" class="block px-4 py-2 text-gray-700 hover:bg-gray-100 hover:text-blue-600 transition duration-300">Ingredient Database</a>
                        <a href="#pantry-inventory" class="block px-4 py-2 text-gray-700 hover:bg-gray-100 hover:text-blue-600 transition duration-300">Pantry Inventory</a>
                        <a href="#tools" class="block px-4 py-2 text-gray-700 hover:bg-gray-100 hover:text-blue-600 transition duration-300">Tools</a>
                    </div>
                </div>
            </div>
        </header>

        <!-- Main Content Area -->
        <main class="container mx-auto px-4 py-8">

            <!-- Welcome Section -->
            <section class="bg-blue-100 rounded-lg shadow-lg p-8 mb-12 text-center">
                <h1 class="text-4xl font-bold text-blue-800 mb-4">Welcome, R&D Chef!</h1>
                <p class="text-lg text-blue-700">Your digital notebook for culinary innovation and precision.</p>
            </section>

            <!-- 1.1 Recipe & Dish Creation/Editing -->
            <section id="recipe-management" class="bg-white rounded-lg shadow-xl p-8 mb-12">
                <h2 class="text-3xl font-semibold text-gray-800 mb-6 border-b pb-4">Recipe Management</h2>

                <!-- New Recipe Form -->
                <div class="mb-8">
                    <h3 class="text-2xl font-medium text-gray-700 mb-4">Create/Edit Recipe</h3>
                    <form id="recipe-form" class="space-y-6">
                        <div>
                            <label for="recipe-name" class="block text-gray-700 text-sm font-bold mb-2">Recipe Name:</label>
                            <input type="text" id="recipe-name" placeholder="e.g., Spicy Thai Basil Chicken" class="shadow-sm appearance-none border rounded-lg w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-300" required>
                        </div>

                        <div>
                            <label for="recipe-description" class="block text-gray-700 text-sm font-bold mb-2">Description / Notes:</label>
                            <textarea id="recipe-description" rows="3" placeholder="Brief description or general notes about the dish." class="shadow-sm appearance-none border rounded-lg w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-300"></textarea>
                        </div>

                        <!-- Ingredients Section -->
                        <div>
                            <label class="block text-gray-700 text-sm font-bold mb-2">Ingredients:</label>
                            <div id="ingredients-container" class="space-y-3">
                                <!-- Initial ingredient row -->
                                <div class="flex flex-col sm:flex-row gap-2">
                                    <input type="text" placeholder="Ingredient Name" class="shadow-sm border rounded-lg py-2 px-3 flex-grow focus:outline-none focus:ring-2 focus:ring-blue-300">
                                    <input type="number" placeholder="Quantity" min="0" step="any" class="shadow-sm border rounded-lg py-2 px-3 w-24 focus:outline-none focus:ring-2 focus:ring-blue-300">
                                    <select class="shadow-sm border rounded-lg py-2 px-3 w-24 focus:outline-none focus:ring-2 focus:ring-blue-300">
                                        <option value="">Unit</option>
                                        <option value="g">g</option>
                                        <option value="ml">ml</option>
                                        <option value="cup">cup</option>
                                        <option value="tsp">tsp</option>
                                        <option value="tbsp">tbsp</option>
                                        <option value="each">each</option>
                                    </select>
                                    <button type="button" class="remove-ingredient-btn bg-red-100 hover:bg-red-200 text-red-700 p-2 rounded-full transition duration-300 flex items-center justify-center">
                                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5"><path stroke-linecap="round" stroke-linejoin="round" d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.924a2.25 2.25 0 01-2.244-2.077L4.74 5.938m1.588-.59L10.59 1.5l1.044 1.054L15.364 5.21M6.01 6.01l4.477 4.477m-4.477 0l4.477-4.477"></path></svg>
                                    </button>
                                </div>
                            </div>
                            <button type="button" id="add-ingredient-btn" class="mt-3 bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded-full transition duration-300">Add Ingredient</button>
                        </div>

                        <!-- Instructions Section -->
                        <div>
                            <label class="block text-gray-700 text-sm font-bold mb-2">Instructions:</label>
                            <div id="instructions-container" class="space-y-3">
                                <!-- Initial instruction step -->
                                <div class="flex gap-2">
                                    <textarea placeholder="Step 1: Describe this step..." rows="2" class="shadow-sm border rounded-lg py-2 px-3 flex-grow focus:outline-none focus:ring-2 focus:ring-blue-300"></textarea>
                                    <button type="button" class="remove-instruction-btn bg-red-100 hover:bg-red-200 text-red-700 p-2 rounded-full transition duration-300 flex items-center justify-center">
                                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5"><path stroke-linecap="round" stroke-linejoin="round" d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.924a2.25 2.25 0 01-2.244-2.077L4.74 5.938m1.588-.59L10.59 1.5l1.044 1.054L15.364 5.21M6.01 6.01l4.477 4.477m-4.477 0l4.477-4.477"></path></svg>
                                    </button>
                                </div>
                            </div>
                            <button type="button" id="add-instruction-btn" class="mt-3 bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded-full transition duration-300">Add Step</button>
                        </div>

                        <div class="flex justify-end space-x-4">
                            <button type="reset" class="bg-gray-200 hover:bg-gray-300 text-gray-800 font-medium py-2 px-6 rounded-full transition duration-300">Clear</button>
                            <button type="submit" class="bg-green-600 hover:bg-green-700 text-white font-semibold py-2 px-6 rounded-full shadow-md transition duration-300">Save Recipe</button>
                        </div>
                    </form>
                </div>

                <!-- Saved Recipes (Placeholder for 1.2 Version Control) -->
                <div>
                    <h3 class="text-2xl font-medium text-gray-700 mb-4">Saved Recipes</h3>
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        <!-- Example Recipe Card -->
                        <div class="bg-gray-100 rounded-lg p-4 shadow-sm hover:shadow-md transition duration-300">
                            <h4 class="font-bold text-lg text-gray-800 mb-1">Classic Tomato Soup v2</h4>
                            <p class="text-sm text-gray-600 mb-2">Refined recipe with roasted tomatoes for deeper flavor.</p>
                            <div class="flex justify-between items-center text-sm">
                                <span class="text-blue-600 hover:underline cursor-pointer">View Details</span>
                                <span class="text-gray-500">Last updated: 2024-06-16</span>
                                <!-- Placeholder for version control actions -->
                                <button class="text-blue-500 hover:text-blue-700 text-xs">History</button>
                            </div>
                        </div>
                        <div class="bg-gray-100 rounded-lg p-4 shadow-sm hover:shadow-md transition duration-300">
                            <h4 class="font-bold text-lg text-gray-800 mb-1">Spicy Noodle Stir-fry</h4>
                            <p class="text-sm text-gray-600 mb-2">A quick and versatile stir-fry base.</p>
                            <div class="flex justify-between items-center text-sm">
                                <span class="text-blue-600 hover:underline cursor-pointer">View Details</span>
                                <span class="text-gray-500">Last updated: 2024-05-20</span>
                                <button class="text-blue-500 hover:text-blue-700 text-xs">History</button>
                            </div>
                        </div>
                        <!-- More recipes would be dynamically loaded here -->
                    </div>
                </div>
            </section>

            <!-- 1.3 Master Ingredient Database -->
            <section id="ingredient-database" class="bg-white rounded-lg shadow-xl p-8 mb-12">
                <h2 class="text-3xl font-semibold text-gray-800 mb-6 border-b pb-4">Master Ingredient Database</h2>

                <div class="mb-6">
                    <h3 class="text-2xl font-medium text-gray-700 mb-4">Add New Ingredient (User Specific)</h3>
                    <div class="flex flex-col sm:flex-row gap-4">
                        <input type="text" id="new-ingredient-name" placeholder="Ingredient Name" class="shadow-sm border rounded-lg py-2 px-3 flex-grow focus:outline-none focus:ring-2 focus:ring-blue-300">
                        <input type="text" id="new-ingredient-unit" placeholder="Default Unit (e.g., g, ml, each)" class="shadow-sm border rounded-lg py-2 px-3 w-48 focus:outline-none focus:ring-2 focus:ring-blue-300">
                        <button id="add-to-database-btn" class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-6 rounded-full transition duration-300">Add to My Database</button>
                    </div>
                </div>

                <div>
                    <h3 class="text-2xl font-medium text-gray-700 mb-4">Available Ingredients</h3>
                    <input type="text" id="search-ingredients" placeholder="Search ingredients (shared & your own)..." class="shadow-sm border rounded-lg w-full py-2 px-3 mb-4 focus:outline-none focus:ring-2 focus:ring-blue-300">

                    <div id="existing-ingredients-container" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                        <!-- Ingredients will be dynamically loaded here by JavaScript -->
                    </div>
                </div>
            </section>

            <!-- 1.4 Pantry Inventory (Basic) -->
            <section id="pantry-inventory" class="bg-white rounded-lg shadow-xl p-8 mb-12">
                <h2 class="text-3xl font-semibold text-gray-800 mb-6 border-b pb-4">Pantry Inventory</h2>

                <div class="mb-6">
                    <h3 class="2xl font-medium text-gray-700 mb-4">Update Pantry Stock</h3>
                    <div class="flex flex-col sm:flex-row gap-4">
                        <input type="text" placeholder="Ingredient Name" class="shadow-sm border rounded-lg py-2 px-3 flex-grow focus:outline-none focus:ring-2 focus:ring-blue-300">
                        <input type="number" placeholder="Quantity" min="0" step="any" class="shadow-sm border rounded-lg py-2 px-3 w-24 focus:outline-none focus:ring-2 focus:ring-blue-300">
                        <select class="shadow-sm border rounded-lg py-2 px-3 w-24 focus:outline-none focus:ring-2 focus:ring-blue-300">
                            <option value="">Unit</option>
                            <option value="g">g</option>
                            <option value="ml">ml</option>
                            <option value="cup">cup</option>
                            <option value="tsp">tsp</option>
                            <option value="tbsp">tbsp</option>
                            <option value="each">each</option>
                        </select>
                        <button class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-6 rounded-full transition duration-300">Add/Update Stock</button>
                    </div>
                </div>

                <div>
                    <h3 class="text-2xl font-medium text-gray-700 mb-4">Current Pantry Stock</h3>
                    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                        <!-- Pantry Items will be dynamically loaded here by JavaScript -->
                    </div>
                </div>
            </section>

            <!-- 1.5 Basic Scaling & Unit Conversion (Tools Section) -->
            <section id="tools" class="bg-white rounded-lg shadow-xl p-8 mb-12">
                <h2 class="text-3xl font-semibold text-gray-800 mb-6 border-b pb-4">R&D Tools</h2>

                <div class="mb-6">
                    <h3 class="2xl font-medium text-gray-700 mb-4">Recipe Scaling</h3>
                    <div class="flex flex-col sm:flex-row items-end gap-4">
                        <div class="flex-grow">
                            <label for="scale-recipe" class="block text-gray-700 text-sm font-bold mb-2">Select Recipe:</label>
                            <select id="scale-recipe" class="shadow-sm appearance-none border rounded-lg w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-blue-300">
                                <option value="">Choose a recipe</option>
                                <option value="recipe1">Classic Tomato Soup v2</option>
                                <option value="recipe2">Spicy Noodle Stir-fry</option>
                            </select>
                        </div>
                        <div>
                            <label for="current-servings" class="block text-gray-700 text-sm font-bold mb-2">Current Servings:</label>
                            <input type="number" id="current-servings" value="4" min="1" class="shadow-sm border rounded-lg py-2 px-3 w-24 focus:outline-none focus:ring-2 focus:ring-blue-300">
                        </div>
                        <div>
                            <label for="new-servings" class="block text-gray-700 text-sm font-bold mb-2">New Servings:</label>
                            <input type="number" id="new-servings" value="8" min="1" class="shadow-sm border rounded-lg py-2 px-3 w-24 focus:outline-none focus:ring-2 focus:ring-blue-300">
                        </div>
                        <button class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-6 rounded-full transition duration-300">Scale Recipe</button>
                    </div>
                    <div class="mt-4 p-4 bg-blue-50 rounded-lg hidden" id="scaled-recipe-output">
                        <h4 class="font-semibold text-gray-800">Scaled Recipe (Preview):</h4>
                        <ul class="list-disc list-inside text-gray-700 text-sm">
                            <li>Ingredient A: <span class="font-medium">X units</span></li>
                            <li>Ingredient B: <span class="font-medium">Y units</span></li>
                            <!-- Dynamic content would go here -->
                        </ul>
                    </div>
                </div>

                <div>
                    <h3 class="2xl font-medium text-gray-700 mb-4">Unit Converter</h3>
                    <div class="flex flex-col sm:flex-row items-end gap-4">
                        <div class="flex-grow">
                            <label for="convert-quantity" class="block text-gray-700 text-sm font-bold mb-2">Quantity:</label>
                            <input type="number" id="convert-quantity" value="100" min="0" step="any" class="shadow-sm border rounded-lg w-full py-2 px-3 focus:outline-none focus:ring-2 focus:ring-blue-300">
                        </div>
                        <div>
                            <label for="convert-from" class="block text-gray-700 text-sm font-bold mb-2">From Unit:</label>
                            <select class="shadow-sm appearance-none border rounded-lg w-24 py-2 px-3 focus:outline-none focus:ring-2 focus:ring-blue-300">
                                <option value="g">g</option>
                                <option value="ml">ml</option>
                                <option value="cup">cup</option>
                                <option value="tsp">tsp</option>
                                <option value="tbsp">tbsp</option>
                            </select>
                        </div>
                        <div>
                            <label for="convert-to" class="block text-gray-700 text-sm font-bold mb-2">To Unit:</label>
                            <select id="convert-to" class="shadow-sm appearance-none border rounded-lg w-24 py-2 px-3 focus:outline-none focus:ring-2 focus:ring-blue-300">
                                <option value="kg">kg</option>
                                <option value="liter">Liter</option>
                                <option value="oz">oz (fluid)</option>
                                <option value="lb">lb</option>
                            </select>
                        </div>
                        <button class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-6 rounded-full transition duration-300">Convert</button>
                    </div>
                    <div class="mt-4 p-4 bg-blue-50 rounded-lg hidden" id="conversion-output">
                        <h4 class="font-semibold text-gray-800">Result:</h4>
                        <p class="text-gray-700 text-lg"><span class="font-medium">XXX</span> <span id="converted-unit"></span></p>
                    </div>
                </div>
            </section>

            <!-- Placeholder for 1.6 Menu Creation & 1.7 Prep List Generation -->
            <section class="bg-white rounded-lg shadow-xl p-8 mb-12">
                <h2 class="text-3xl font-semibold text-gray-800 mb-6 border-b pb-4">Menu & Prep List</h2>
                <p class="text-gray-700 mb-4">
                    This section will allow you to compile dishes into menus and generate consolidated prep lists.
                    (Features 1.6 & 1.7 from your roadmap).
                </p>
                <button class="bg-purple-600 hover:bg-purple-700 text-white font-medium py-2 px-6 rounded-full transition duration-300">Go to Menu Builder</button>
            </section>

        </main>

        <!-- Footer Section -->
        <footer class="bg-gray-800 text-white py-6">
            <div class="container mx-auto px-4 text-center">
                <p>&copy; 2024 Iterum R&D Chef Notebook. All rights reserved.</p>
            </div>
        </footer>
    </div>
</body>
</html>
