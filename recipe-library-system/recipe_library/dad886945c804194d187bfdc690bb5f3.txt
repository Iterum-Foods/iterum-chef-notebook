import React, { useState, useEffect, useRef, useCallback } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';
import {
  getFirestore,
  collection,
  doc,
  onSnapshot,
  addDoc,
  setDoc,
  deleteDoc,
  query,
  getDocs,
  where,
  updateDoc
} from 'firebase/firestore';

// Ensure Tailwind CSS is available in the environment.
// This script tag is usually added in the HTML head, but for self-contained immersive,
// we assume it's pre-loaded or provided by the environment.

const App = () => {
  // Firebase initialization and authentication state
  const [db, setDb] = useState(null);
  const [auth, setAuth] = useState(null);
  const [userId, setUserId] = useState(null);
  const [isAuthReady, setIsAuthReady] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  // App navigation state
  const [currentView, setCurrentView] = useState('recipes'); // 'recipes', 'ingredients', 'menus', 'equipment', 'add-recipe', 'edit-recipe'

  // Data states
  const [recipes, setRecipes] = useState([]);
  const [ingredients, setIngredients] = useState([]);
  const [menus, setMenus] = useState([]);
  const [equipment, setEquipment] = useState([]);

  // Form states for adding/editing recipes
  const [editingRecipe, setEditingRecipe] = useState(null); // null for new, object for edit
  const [recipeForm, setRecipeForm] = useState({
    name: '',
    prepTime: '',
    cookTime: '',
    yield: '',
    ingredients: [{ id: '', name: '', quantity: '', unit: '' }], // Ingredient IDs will link to ingredient collection
    steps: [''],
    creationDate: new Date().toISOString().split('T')[0],
    inspiration: '',
    restaurant: '',
    location: '',
    linkedRecipes: [], // Store {id, name} of prep recipes
    sketches: [], // Array of sketch objects: [{id, name, dataURL, timestamp}]
  });

  // Canvas drawing states and refs
  const canvasRef = useRef(null);
  const isDrawing = useRef(false);
  const lastX = useRef(0);
  const lastY = useRef(0);
  const [activeSketchId, setActiveSketchId] = useState(null); // ID of the sketch currently loaded on canvas

  // --- Firebase Initialization and Auth ---
  useEffect(() => {
    try {
      // Access global variables provided by the Canvas environment
      const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
      const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : null;
      const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

      if (!firebaseConfig) {
        throw new Error("Firebase config not provided. Cannot initialize app.");
      }

      const app = initializeApp(firebaseConfig);
      const firestoreDb = getFirestore(app);
      const firebaseAuth = getAuth(app);

      setDb(firestoreDb);
      setAuth(firebaseAuth);

      // Authenticate user
      const authenticateUser = async () => {
        try {
          if (initialAuthToken) {
            await signInWithCustomToken(firebaseAuth, initialAuthToken);
          } else {
            // Sign in anonymously if no custom token is provided (for development/public access)
            await signInAnonymously(firebaseAuth);
          }
        } catch (authError) {
          console.error("Firebase Authentication Error:", authError);
          setError(`Authentication failed: ${authError.message}. Please check your Firebase setup.`);
          // Even on auth error, try to proceed to allow anonymous access if applicable
        } finally {
          setIsAuthReady(true);
        }
      };

      authenticateUser();

      // Set up auth state listener to get the user ID
      const unsubscribeAuth = onAuthStateChanged(firebaseAuth, (user) => {
        if (user) {
          setUserId(user.uid);
          console.log("Authenticated User ID:", user.uid);
        } else {
          setUserId(null);
          console.log("No user authenticated.");
        }
      });

      return () => unsubscribeAuth(); // Cleanup auth listener on unmount
    } catch (err) {
      console.error("Firebase initialization failed:", err);
      setError(`Failed to initialize Firebase: ${err.message}.`);
      setIsLoading(false); // Stop loading if init fails
    }
  }, []);

  // --- Firestore Data Listeners ---
  useEffect(() => {
    if (!db || !userId || !isAuthReady) {
      console.log("Firestore listeners not ready: db, userId, or auth not available.");
      return;
    }

    const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id'; // Fallback for app ID

    // Recipes Listener
    const recipesColRef = collection(db, `artifacts/${appId}/users/${userId}/recipes`);
    const unsubscribeRecipes = onSnapshot(recipesColRef, (snapshot) => {
      const fetchedRecipes = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setRecipes(fetchedRecipes);
      console.log("Recipes loaded:", fetchedRecipes.length);
    }, (err) => {
      console.error("Error fetching recipes:", err);
      setError("Failed to load recipes. Please check your network connection.");
    });

    // Ingredients Listener
    const ingredientsColRef = collection(db, `artifacts/${appId}/users/${userId}/ingredients`);
    const unsubscribeIngredients = onSnapshot(ingredientsColRef, (snapshot) => {
      const fetchedIngredients = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setIngredients(fetchedIngredients);
      console.log("Ingredients loaded:", fetchedIngredients.length);
    }, (err) => {
      console.error("Error fetching ingredients:", err);
      setError("Failed to load ingredients. Please check your network connection.");
    });

    // Menus Listener
    const menusColRef = collection(db, `artifacts/${appId}/users/${userId}/menus`);
    const unsubscribeMenus = onSnapshot(menusColRef, (snapshot) => {
      const fetchedMenus = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setMenus(fetchedMenus);
      console.log("Menus loaded:", fetchedMenus.length);
    }, (err) => {
      console.error("Error fetching menus:", err);
      setError("Failed to load menus. Please check your network connection.");
    });

    // Equipment Listener
    const equipmentColRef = collection(db, `artifacts/${appId}/users/${userId}/equipment`);
    const unsubscribeEquipment = onSnapshot(equipmentColRef, (snapshot) => {
      const fetchedEquipment = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setEquipment(fetchedEquipment);
      console.log("Equipment loaded:", fetchedEquipment.length);
    }, (err) => {
      console.error("Error fetching equipment:", err);
      setError("Failed to load equipment. Please check your network connection.");
    });

    setIsLoading(false); // Data loading complete after setting up listeners

    // Cleanup listeners on component unmount or when userId/db changes
    return () => {
      unsubscribeRecipes();
      unsubscribeIngredients();
      unsubscribeMenus();
      unsubscribeEquipment();
    };
  }, [db, userId, isAuthReady]);

  // --- Recipe Form Handlers ---
  const handleRecipeFormChange = (e) => {
    const { name, value } = e.target;
    setRecipeForm(prev => ({ ...prev, [name]: value }));
  };

  const handleIngredientChange = (index, field, value) => {
    const newIngredients = [...recipeForm.ingredients];
    newIngredients[index][field] = value;
    setRecipeForm(prev => ({ ...prev, ingredients: newIngredients }));
  };

  const addIngredientField = () => {
    setRecipeForm(prev => ({
      ...prev,
      ingredients: [...prev.ingredients, { id: '', name: '', quantity: '', unit: '' }]
    }));
  };

  const removeIngredientField = (index) => {
    setRecipeForm(prev => ({
      ...prev,
      ingredients: prev.ingredients.filter((_, i) => i !== index)
    }));
  };

  const handleStepChange = (index, value) => {
    const newSteps = [...recipeForm.steps];
    newSteps[index] = value;
    setRecipeForm(prev => ({ ...prev, steps: newSteps }));
  };

  const addStepField = () => {
    setRecipeForm(prev => ({ ...prev, steps: [...prev.steps, ''] }));
  };

  const removeStepField = (index) => {
    setRecipeForm(prev => ({ ...prev, steps: prev.steps.filter((_, i) => i !== index) }));
  };

  const handleLinkedRecipeChange = (e) => {
    const selectedOptions = Array.from(e.target.selectedOptions);
    const newLinkedRecipes = selectedOptions.map(option => {
      const recipe = recipes.find(r => r.id === option.value);
      return { id: recipe.id, name: recipe.name };
    });
    setRecipeForm(prev => ({ ...prev, linkedRecipes: newLinkedRecipes }));
  };

  const resetRecipeForm = () => {
    setRecipeForm({
      name: '',
      prepTime: '',
      cookTime: '',
      yield: '',
      ingredients: [{ id: '', name: '', quantity: '', unit: '' }],
      steps: [''],
      creationDate: new Date().toISOString().split('T')[0],
      inspiration: '',
      restaurant: '',
      location: '',
      linkedRecipes: [],
      sketches: [] // Reset sketches array
    });
    setEditingRecipe(null);
    setActiveSketchId(null); // Clear active sketch selection
    clearCanvas(); // Clear canvas when resetting form
  };

  // --- Firestore CRUD Operations for Recipes ---
  const addOrUpdateRecipe = async (e) => {
    e.preventDefault();
    if (!db || !userId) {
      console.error("Firestore not initialized or user not authenticated.");
      setError("Cannot save recipe: Authentication not complete. Please try again.");
      return;
    }
    const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
    try {
      if (editingRecipe) {
        // Update existing recipe
        await updateDoc(doc(db, `artifacts/${appId}/users/${userId}/recipes`, editingRecipe.id), recipeForm);
        console.log("Recipe updated with ID: ", editingRecipe.id);
      } else {
        // Add new recipe
        const docRef = await addDoc(collection(db, `artifacts/${appId}/users/${userId}/recipes`), recipeForm);
        console.log("Recipe added with ID: ", docRef.id);
      }
      resetRecipeForm();
      setCurrentView('recipes'); // Go back to recipe list
    } catch (err) {
      console.error("Error adding/updating recipe:", err);
      setError(`Failed to save recipe: ${err.message}`);
    }
  };

  const deleteRecipe = async (recipeId) => {
    if (!db || !userId) {
      console.error("Firestore not initialized or user not authenticated.");
      setError("Cannot delete recipe: Authentication not complete.");
      return;
    }
    const confirmDelete = window.confirm("Are you sure you want to delete this recipe?"); // Use a custom modal in a real app
    if (!confirmDelete) return;

    const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
    try {
      await deleteDoc(doc(db, `artifacts/${appId}/users/${userId}/recipes`, recipeId));
      console.log("Recipe deleted:", recipeId);
    } catch (err) {
      console.error("Error deleting recipe:", err);
      setError(`Failed to delete recipe: ${err.message}`);
    }
  };

  const startEditRecipe = (recipe) => {
    setEditingRecipe(recipe);
    // Deep copy for ingredients and steps to prevent direct state mutation
    setRecipeForm({
      ...recipe,
      ingredients: recipe.ingredients ? [...recipe.ingredients] : [{ id: '', name: '', quantity: '', unit: '' }],
      steps: recipe.steps ? [...recipe.steps] : [''],
      linkedRecipes: recipe.linkedRecipes ? [...recipe.linkedRecipes] : [],
      sketches: recipe.sketches ? [...recipe.sketches] : [], // Deep copy sketches
      creationDate: recipe.creationDate || new Date().toISOString().split('T')[0] // Ensure date is present
    });

    // Load the first sketch or clear canvas
    if (recipe.sketches && recipe.sketches.length > 0) {
      loadSketchOnCanvas(recipe.sketches[0].dataURL);
      setActiveSketchId(recipe.sketches[0].id);
    } else {
      clearCanvas();
      setActiveSketchId(null);
    }
    setCurrentView('edit-recipe');
  };

  // --- Canvas Drawing Logic ---
  const initializeCanvas = useCallback(() => {
    const canvas = canvasRef.current;
    if (canvas) {
      const ctx = canvas.getContext('2d');
      // Set canvas dimensions dynamically
      canvas.width = canvas.offsetWidth;
      canvas.height = canvas.offsetHeight;

      ctx.lineWidth = 2;
      ctx.lineCap = 'round';
      ctx.strokeStyle = '#000'; // Black ink

      const getCoords = (e) => {
        const rect = canvas.getBoundingClientRect();
        return {
          x: (e.clientX || e.touches[0].clientX) - rect.left,
          y: (e.clientY || e.touches[0].clientY) - rect.top
        };
      };

      const draw = (e) => {
        if (!isDrawing.current) return;
        ctx.beginPath();
        ctx.moveTo(lastX.current, lastY.current);
        const coords = getCoords(e);
        ctx.lineTo(coords.x, coords.y);
        ctx.stroke();
        lastX.current = coords.x;
        lastY.current = coords.y;
      };

      const startDrawing = (e) => {
        isDrawing.current = true;
        const coords = getCoords(e);
        [lastX.current, lastY.current] = [coords.x, coords.y];
      };

      const stopDrawing = () => {
        isDrawing.current = false;
        // Automatically update the active sketch (or create new if none is active)
        saveCurrentCanvasState();
      };

      // Mouse events
      canvas.addEventListener('mousedown', startDrawing);
      canvas.addEventListener('mousemove', draw);
      canvas.addEventListener('mouseup', stopDrawing);
      canvas.addEventListener('mouseout', stopDrawing); // Stop drawing if mouse leaves canvas

      // Touch events (for mobile responsiveness)
      canvas.addEventListener('touchstart', startDrawing);
      canvas.addEventListener('touchmove', draw);
      canvas.addEventListener('touchend', stopDrawing);
      canvas.addEventListener('touchcancel', stopDrawing); // Handle touch cancellation

      // Cleanup event listeners
      return () => {
        canvas.removeEventListener('mousedown', startDrawing);
        canvas.removeEventListener('mousemove', draw);
        canvas.removeEventListener('mouseup', stopDrawing);
        canvas.removeEventListener('mouseout', stopDrawing);
        canvas.removeEventListener('touchstart', startDrawing);
        canvas.removeEventListener('touchmove', draw);
        canvas.removeEventListener('touchend', stopDrawing);
        canvas.removeEventListener('touchcancel', stopDrawing);
      };
    }
  }, []); // Only run once on mount

  useEffect(() => {
    initializeCanvas();
  }, [initializeCanvas]); // Re-run if initializeCanvas memoized function changes

  // Function to load a specific sketch data URL onto the canvas
  const loadSketchOnCanvas = (dataURL) => {
    const canvas = canvasRef.current;
    if (canvas && dataURL) {
      const ctx = canvas.getContext('2d');
      const img = new Image();
      img.onload = () => {
        ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear existing content
        ctx.drawImage(img, 0, 0, canvas.width, canvas.height); // Draw saved sketch
      };
      img.src = dataURL;
    } else if (canvas) {
      clearCanvas(); // Clear if dataURL is null/empty
    }
  };

  // Saves the current canvas content into the active sketch or creates a new one
  const saveCurrentCanvasState = () => {
    const canvas = canvasRef.current;
    if (canvas) {
      const dataURL = canvas.toDataURL('image/png');
      setRecipeForm(prev => {
        let newSketches = [...prev.sketches];
        if (activeSketchId) {
          // Update existing sketch
          newSketches = newSketches.map(s =>
            s.id === activeSketchId ? { ...s, dataURL: dataURL, timestamp: new Date().toISOString() } : s
          );
        } else {
          // Add as a new sketch (if no active sketch or new drawing on empty canvas)
          const newSketchId = crypto.randomUUID();
          newSketches.push({
            id: newSketchId,
            name: `Sketch ${newSketches.length + 1}`,
            dataURL: dataURL,
            timestamp: new Date().toISOString()
          });
          setActiveSketchId(newSketchId); // Set the newly created sketch as active
        }
        return { ...prev, sketches: newSketches };
      });
    }
  };

  const addNewSketchVersion = () => {
    const canvas = canvasRef.current;
    if (canvas) {
      const ctx = canvas.getContext('2d');
      // Clear canvas before adding new sketch
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      const newSketchId = crypto.randomUUID();
      const newSketchName = `Sketch ${recipeForm.sketches.length + 1}`;
      setRecipeForm(prev => ({
        ...prev,
        sketches: [...prev.sketches, {
          id: newSketchId,
          name: newSketchName,
          dataURL: '', // Empty dataURL for a new blank sketch
          timestamp: new Date().toISOString()
        }]
      }));
      setActiveSketchId(newSketchId); // Set the new blank sketch as active
    }
  };

  const selectSketchVersion = (sketchId) => {
    const selectedSketch = recipeForm.sketches.find(s => s.id === sketchId);
    if (selectedSketch) {
      loadSketchOnCanvas(selectedSketch.dataURL);
      setActiveSketchId(sketchId);
    }
  };

  const deleteSketchVersion = (sketchId) => {
    const confirmDelete = window.confirm("Are you sure you want to delete this sketch version?");
    if (!confirmDelete) return;

    setRecipeForm(prev => {
      const updatedSketches = prev.sketches.filter(s => s.id !== sketchId);
      // If the deleted sketch was active, clear canvas and active ID
      if (activeSketchId === sketchId) {
        clearCanvas();
        setActiveSketchId(null);
      }
      // If there are still sketches, set the first one as active after deletion
      if (updatedSketches.length > 0 && activeSketchId === sketchId) {
        loadSketchOnCanvas(updatedSketches[0].dataURL);
        setActiveSketchId(updatedSketches[0].id);
      }
      return { ...prev, sketches: updatedSketches };
    });
  };

  const updateSketchName = (sketchId, newName) => {
    setRecipeForm(prev => ({
      ...prev,
      sketches: prev.sketches.map(s => s.id === sketchId ? { ...s, name: newName } : s)
    }));
  };

  const clearCanvas = () => {
    const canvas = canvasRef.current;
    if (canvas) {
      const ctx = canvas.getContext('2d');
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      // Note: We don't clear from recipeForm.sketches here,
      // as clearing canvas might just mean user wants to redraw the active sketch.
      // Saving state will then update the active sketch's dataURL to empty or new drawing.
    }
  };

  // --- Firestore CRUD Operations for Ingredients ---
  const addIngredient = async (ingredientData) => {
    if (!db || !userId) return;
    const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
    try {
      await addDoc(collection(db, `artifacts/${appId}/users/${userId}/ingredients`), ingredientData);
    } catch (err) {
      console.error("Error adding ingredient:", err);
      setError(`Failed to add ingredient: ${err.message}`);
    }
  };

  const updateIngredient = async (ingredientId, ingredientData) => {
    if (!db || !userId) return;
    const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
    try {
      await updateDoc(doc(db, `artifacts/${appId}/users/${userId}/ingredients`, ingredientId), ingredientData);
    } catch (err) {
      console.error("Error updating ingredient:", err);
      setError(`Failed to update ingredient: ${err.message}`);
    }
  };

  const deleteIngredient = async (ingredientId) => {
    if (!db || !userId) return;
    const confirmDelete = window.confirm("Are you sure you want to delete this ingredient?");
    if (!confirmDelete) return;

    const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
    try {
      await deleteDoc(doc(db, `artifacts/${appId}/users/${userId}/ingredients`, ingredientId));
    } catch (err) {
      console.error("Error deleting ingredient:", err);
      setError(`Failed to delete ingredient: ${err.message}`);
    }
  };

  // --- Firestore CRUD Operations for Menus ---
  const addMenu = async (menuData) => {
    if (!db || !userId) return;
    const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
    try {
      await addDoc(collection(db, `artifacts/${appId}/users/${userId}/menus`), menuData);
    } catch (err) {
      console.error("Error adding menu:", err);
      setError(`Failed to add menu: ${err.message}`);
    }
  };

  const updateMenu = async (menuId, menuData) => {
    if (!db || !userId) return;
    const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
    try {
      await updateDoc(doc(db, `artifacts/${appId}/users/${userId}/menus`, menuId), menuData);
    } catch (err) {
      console.error("Error updating menu:", err);
      setError(`Failed to update menu: ${err.message}`);
    }
  };

  const deleteMenu = async (menuId) => {
    if (!db || !userId) return;
    const confirmDelete = window.confirm("Are you sure you want to delete this menu?");
    if (!confirmDelete) return;

    const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
    try {
      await deleteDoc(doc(db, `artifacts/${appId}/users/${userId}/menus`, menuId));
    } catch (err) {
      console.error("Error deleting menu:", err);
      setError(`Failed to delete menu: ${err.message}`);
    }
  };

  // --- Firestore CRUD Operations for Equipment ---
  const addEquipment = async (equipmentData) => {
    if (!db || !userId) return;
    const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
    try {
      await addDoc(collection(db, `artifacts/${appId}/users/${userId}/equipment`), equipmentData);
    } catch (err) {
      console.error("Error adding equipment:", err);
      setError(`Failed to add equipment: ${err.message}`);
    }
  };

  const updateEquipment = async (equipmentId, equipmentData) => {
    if (!db || !userId) return;
    const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
    try {
      await updateDoc(doc(db, `artifacts/${appId}/users/${userId}/equipment`, equipmentId), equipmentData);
    } catch (err) {
      console.error("Error updating equipment:", err);
      setError(`Failed to update equipment: ${err.message}`);
    }
  };

  const deleteEquipment = async (equipmentId) => {
    if (!db || !userId) return;
    const confirmDelete = window.confirm("Are you sure you want to delete this equipment?");
    if (!confirmDelete) return;

    const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
    try {
      await deleteDoc(doc(db, `artifacts/${appId}/users/${userId}/equipment`, equipmentId));
    } catch (err) {
      console.error("Error deleting equipment:", err);
      setError(`Failed to delete equipment: ${err.message}`);
    }
  };

  // --- Helper to get ingredient name from ID (for display) ---
  const getIngredientName = (ingredientId) => {
    const ingredient = ingredients.find(ing => ing.id === ingredientId);
    return ingredient ? ingredient.name : 'Unknown Ingredient';
  };

  // --- Main Render Logic ---
  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-gray-100 font-sans">
        <div className="p-6 bg-white rounded-lg shadow-md text-center">
          <p className="text-xl text-gray-700">Loading app and authenticating...</p>
          <div className="mt-4 animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500 mx-auto"></div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex items-center justify-center min-h-screen bg-red-100 font-sans">
        <div className="p-6 bg-white rounded-lg shadow-md text-center text-red-700">
          <h2 className="text-2xl font-bold mb-4">Error!</h2>
          <p>{error}</p>
          <p className="mt-2 text-sm text-gray-600">Please refresh the page or check your Firebase configuration.</p>
        </div>
      </div>
    );
  }

  // Common UI elements: Header and Footer
  const Header = () => (
    <nav className="bg-gradient-to-r from-teal-500 to-emerald-600 p-4 shadow-lg rounded-b-lg">
      <div className="container mx-auto flex flex-col md:flex-row justify-between items-center">
        <h1 className="text-2xl md:text-3xl font-extrabold text-white mb-2 md:mb-0">Culinary Innovation Hub</h1>
        <div className="flex flex-wrap justify-center gap-3">
          <button
            onClick={() => { setCurrentView('recipes'); resetRecipeForm(); }}
            className={`px-4 py-2 rounded-md transition-all duration-200 ease-in-out font-semibold
            ${currentView === 'recipes' || currentView.includes('recipe') ? 'bg-white text-emerald-700 shadow-md' : 'text-white hover:bg-emerald-700 hover:shadow-md'}`}
          >
            Recipes
          </button>
          <button
            onClick={() => setCurrentView('ingredients')}
            className={`px-4 py-2 rounded-md transition-all duration-200 ease-in-out font-semibold
            ${currentView === 'ingredients' ? 'bg-white text-emerald-700 shadow-md' : 'text-white hover:bg-emerald-700 hover:shadow-md'}`}
          >
            Ingredients
          </button>
          <button
            onClick={() => setCurrentView('menus')}
            className={`px-4 py-2 rounded-md transition-all duration-200 ease-in-out font-semibold
            ${currentView === 'menus' ? 'bg-white text-emerald-700 shadow-md' : 'text-white hover:bg-emerald-700 hover:shadow-md'}`}
          >
            Menus
          </button>
          <button
            onClick={() => setCurrentView('equipment')}
            className={`px-4 py-2 rounded-md transition-all duration-200 ease-in-out font-semibold
            ${currentView === 'equipment' ? 'bg-white text-emerald-700 shadow-md' : 'text-white hover:bg-emerald-700 hover:shadow-md'}`}
          >
            Equipment
          </button>
        </div>
      </div>
    </nav>
  );

  const Footer = () => (
    <footer className="bg-gray-800 text-white p-4 text-center mt-8 rounded-t-lg shadow-inner">
      <div className="container mx-auto">
        <p className="text-sm">
          Culinary Innovation Hub &copy; {new Date().getFullYear()}
          <span className="ml-4">User ID: <span className="font-mono text-xs break-all">{userId || 'Not authenticated'}</span></span>
        </p>
        <p className="text-xs mt-2 text-gray-400">
          Powered by React and Firebase Firestore.
        </p>
      </div>
    </footer>
  );


  // --- Recipe Management View ---
  const RecipeListView = () => (
    <div className="container mx-auto p-4 md:p-6 bg-white rounded-lg shadow-lg mt-8">
      <h2 className="text-3xl font-bold text-gray-800 mb-6 border-b-2 border-emerald-400 pb-2">Your Recipes</h2>
      <button
        onClick={() => { setCurrentView('add-recipe'); resetRecipeForm(); }}
        className="bg-emerald-500 hover:bg-emerald-600 text-white font-bold py-3 px-6 rounded-lg shadow-md transition-all duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-emerald-400 focus:ring-opacity-75 mb-6"
      >
        + Add New Recipe
      </button>

      {recipes.length === 0 ? (
        <p className="text-gray-600 text-lg">No recipes yet. Start by adding one!</p>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {recipes.map((recipe) => (
            <div key={recipe.id} className="bg-gray-50 p-6 rounded-xl shadow-md border border-gray-200 hover:shadow-lg transition-shadow duration-300">
              <h3 className="text-xl font-bold text-teal-700 mb-2">{recipe.name}</h3>
              <p className="text-sm text-gray-600 mb-1">Prep: {recipe.prepTime} | Cook: {recipe.cookTime} | Yield: {recipe.yield}</p>
              {recipe.restaurant && <p className="text-xs text-gray-500 mb-1">From: {recipe.restaurant}</p>}
              {recipe.linkedRecipes && recipe.linkedRecipes.length > 0 && (
                <p className="text-xs text-gray-500 mb-1">
                  Linked Preps: {recipe.linkedRecipes.map(lr => lr.name).join(', ')}
                </p>
              )}
              {/* Display the first sketch if available */}
              {recipe.sketches && recipe.sketches.length > 0 && recipe.sketches[0].dataURL && (
                <div className="mt-3">
                  <img src={recipe.sketches[0].dataURL} alt="Plating Sketch" className="w-full h-32 object-contain rounded-md border border-gray-300 bg-white" />
                </div>
              )}
              <div className="mt-4 flex gap-3">
                <button
                  onClick={() => setCurrentView('recipe-detail')} // Implement actual detail view
                  className="bg-blue-500 hover:bg-blue-600 text-white text-sm py-2 px-4 rounded-lg transition-colors duration-200 shadow-md"
                >
                  View
                </button>
                <button
                  onClick={() => startEditRecipe(recipe)}
                  className="bg-yellow-500 hover:bg-yellow-600 text-white text-sm py-2 px-4 rounded-lg transition-colors duration-200 shadow-md"
                >
                  Edit
                </button>
                <button
                  onClick={() => deleteRecipe(recipe.id)}
                  className="bg-red-500 hover:bg-red-600 text-white text-sm py-2 px-4 rounded-lg transition-colors duration-200 shadow-md"
                >
                  Delete
                </button>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );

  const RecipeFormView = ({ isEdit }) => (
    <div className="container mx-auto p-4 md:p-8 bg-white rounded-lg shadow-lg mt-8 mb-8">
      <h2 className="text-3xl font-bold text-gray-800 mb-6 border-b-2 border-emerald-400 pb-2">
        {isEdit ? 'Edit Recipe' : 'Add New Recipe'}
      </h2>
      <form onSubmit={addOrUpdateRecipe} className="space-y-6">
        {/* Basic Details */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label htmlFor="name" className="block text-sm font-semibold text-gray-700 mb-1">Recipe Name</label>
            <input
              type="text"
              id="name"
              name="name"
              value={recipeForm.name}
              onChange={handleRecipeFormChange}
              className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-emerald-500 focus:border-emerald-500 sm:text-sm"
              placeholder="e.g., Spicy Tomato Salsa"
              required
            />
          </div>
          <div>
            <label htmlFor="creationDate" className="block text-sm font-semibold text-gray-700 mb-1">Creation Date</label>
            <input
              type="date"
              id="creationDate"
              name="creationDate"
              value={recipeForm.creationDate}
              onChange={handleRecipeFormChange}
              className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-emerald-500 focus:border-emerald-500 sm:text-sm"
            />
          </div>
          <div>
            <label htmlFor="prepTime" className="block text-sm font-semibold text-gray-700 mb-1">Prep Time</label>
            <input
              type="text"
              id="prepTime"
              name="prepTime"
              value={recipeForm.prepTime}
              onChange={handleRecipeFormChange}
              className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-emerald-500 focus:border-emerald-500 sm:text-sm"
              placeholder="e.g., 20 mins"
            />
          </div>
          <div>
            <label htmlFor="cookTime" className="block text-sm font-semibold text-gray-700 mb-1">Cook Time</label>
            <input
              type="text"
              id="cookTime"
              name="cookTime"
              value={recipeForm.cookTime}
              onChange={handleRecipeFormChange}
              className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-emerald-500 focus:border-emerald-500 sm:text-sm"
              placeholder="e.g., 1 hour"
            />
          </div>
          <div>
            <label htmlFor="yield" className="block text-sm font-semibold text-gray-700 mb-1">Yield</label>
            <input
              type="text"
              id="yield"
              name="yield"
              value={recipeForm.yield}
              onChange={handleRecipeFormChange}
              className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-emerald-500 focus:border-emerald-500 sm:text-sm"
              placeholder="e.g., 4 servings"
            />
          </div>
          <div>
            <label htmlFor="inspiration" className="block text-sm font-semibold text-gray-700 mb-1">Inspiration</label>
            <input
              type="text"
              id="inspiration"
              name="inspiration"
              value={recipeForm.inspiration}
              onChange={handleRecipeFormChange}
              className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-emerald-500 focus:border-emerald-500 sm:text-sm"
              placeholder="e.g., Grandparent's cooking"
            />
          </div>
          <div>
            <label htmlFor="restaurant" className="block text-sm font-semibold text-gray-700 mb-1">Restaurant/Source</label>
            <input
              type="text"
              id="restaurant"
              name="restaurant"
              value={recipeForm.restaurant}
              onChange={handleRecipeFormChange}
              className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-emerald-500 focus:border-emerald-500 sm:text-sm"
              placeholder="e.g., The French Laundry"
            />
          </div>
          <div>
            <label htmlFor="location" className="block text-sm font-semibold text-gray-700 mb-1">Location</label>
            <input
              type="text"
              id="location"
              name="location"
              value={recipeForm.location}
              onChange={handleRecipeFormChange}
              className="mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-emerald-500 focus:border-emerald-500 sm:text-sm"
              placeholder="e.g., Napa Valley, CA"
            />
          </div>
        </div>

        {/* Ingredients Section */}
        <div className="border border-gray-200 rounded-md p-4">
          <h3 className="text-lg font-bold text-gray-800 mb-4">Ingredients</h3>
          {recipeForm.ingredients.map((ingredient, index) => (
            <div key={index} className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-3 items-end">
              <div>
                <label htmlFor={`ingredient-name-${index}`} className="block text-xs font-medium text-gray-600">Name</label>
                <input
                  type="text"
                  id={`ingredient-name-${index}`}
                  value={ingredient.name}
                  onChange={(e) => handleIngredientChange(index, 'name', e.target.value)}
                  className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm text-sm"
                  placeholder="e.g., Tomatoes"
                />
              </div>
              <div>
                <label htmlFor={`ingredient-quantity-${index}`} className="block text-xs font-medium text-gray-600">Quantity</label>
                <input
                  type="text"
                  id={`ingredient-quantity-${index}`}
                  value={ingredient.quantity}
                  onChange={(e) => handleIngredientChange(index, 'quantity', e.target.value)}
                  className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm text-sm"
                  placeholder="e.g., 2"
                />
              </div>
              <div>
                <label htmlFor={`ingredient-unit-${index}`} className="block text-xs font-medium text-gray-600">Unit</label>
                <input
                  type="text"
                  id={`ingredient-unit-${index}`}
                  value={ingredient.unit}
                  onChange={(e) => handleIngredientChange(index, 'unit', e.target.value)}
                  className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm text-sm"
                  placeholder="e.g., lbs"
                />
              </div>
              <div className="flex justify-end items-end">
                {recipeForm.ingredients.length > 1 && (
                  <button
                    type="button"
                    onClick={() => removeIngredientField(index)}
                    className="bg-red-400 hover:bg-red-500 text-white text-sm py-2 px-3 rounded-md transition-colors duration-200"
                  >
                    Remove
                  </button>
                )}
              </div>
            </div>
          ))}
          <button
            type="button"
            onClick={addIngredientField}
            className="mt-4 bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-md shadow-sm transition-colors duration-200"
          >
            Add Ingredient
          </button>
        </div>

        {/* Linked Recipes Section */}
        <div className="border border-gray-200 rounded-md p-4">
          <h3 className="text-lg font-bold text-gray-800 mb-4">Link Prep Recipes</h3>
          <select
            multiple
            value={recipeForm.linkedRecipes.map(lr => lr.id)}
            onChange={handleLinkedRecipeChange}
            className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-emerald-500 focus:border-emerald-500 sm:text-sm h-32"
          >
            {recipes
              .filter(r => r.id !== (editingRecipe ? editingRecipe.id : null)) // Cannot link to itself
              .map(recipe => (
                <option key={recipe.id} value={recipe.id}>
                  {recipe.name}
                </option>
              ))}
          </select>
          <p className="text-xs text-gray-500 mt-2">Hold Ctrl/Cmd to select multiple prep recipes.</p>
        </div>


        {/* Steps Section */}
        <div className="border border-gray-200 rounded-md p-4">
          <h3 className="text-lg font-bold text-gray-800 mb-4">Instructions</h3>
          {recipeForm.steps.map((step, index) => (
            <div key={index} className="flex gap-3 mb-3 items-center">
              <span className="font-semibold text-gray-700">{index + 1}.</span>
              <textarea
                value={step}
                onChange={(e) => handleStepChange(index, e.target.value)}
                className="flex-grow mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm text-sm"
                rows="2"
                placeholder={`Step ${index + 1}`}
              ></textarea>
              {recipeForm.steps.length > 1 && (
                <button
                  type="button"
                  onClick={() => removeStepField(index)}
                  className="bg-red-400 hover:bg-red-500 text-white text-sm py-2 px-3 rounded-md transition-colors duration-200 self-end"
                >
                  Remove
                </button>
              )}
            </div>
          ))}
          <button
            type="button"
            onClick={addStepField}
            className="mt-4 bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-md shadow-sm transition-colors duration-200"
          >
            Add Step
          </button>
        </div>

        {/* Sketch/Plating Section */}
        <div className="border border-gray-200 rounded-md p-4">
          <h3 className="text-lg font-bold text-gray-800 mb-4">Plating Sketches / Visual Notes</h3>
          <p className="text-sm text-gray-600 mb-2">Draw your plating ideas or visual notes here. You can create multiple versions.</p>

          {/* Sketch Versions Management */}
          <div className="mb-4 flex flex-wrap gap-2 items-center">
            {recipeForm.sketches.map(sketch => (
              <div
                key={sketch.id}
                className={`relative border-2 rounded-md overflow-hidden cursor-pointer
                  ${activeSketchId === sketch.id ? 'border-emerald-500 shadow-md' : 'border-gray-300 hover:border-gray-400'}`}
                onClick={() => selectSketchVersion(sketch.id)}
              >
                <img src={sketch.dataURL || 'https://placehold.co/100x70/E0E0E0/666666?text=Blank'} alt={sketch.name} className="w-24 h-16 object-contain bg-white" />
                <p className="text-xs text-center text-gray-700 truncate w-full p-1 bg-gray-100">{sketch.name}</p>
                <button
                  type="button"
                  onClick={(e) => { e.stopPropagation(); deleteSketchVersion(sketch.id); }}
                  className="absolute top-0 right-0 bg-red-500 text-white rounded-bl-md px-1 py-0.5 text-xs hover:bg-red-600"
                  title="Delete sketch version"
                >
                  &times;
                </button>
              </div>
            ))}
            <button
              type="button"
              onClick={addNewSketchVersion}
              className="bg-purple-500 hover:bg-purple-600 text-white font-bold py-2 px-4 rounded-md shadow-sm transition-colors duration-200 flex-shrink-0"
            >
              + New Sketch Version
            </button>
          </div>

          {/* Current Active Sketch Drawing Area */}
          <div className="relative border border-gray-400 rounded-md overflow-hidden bg-white">
            <h4 className="text-md font-semibold text-gray-700 p-2 border-b border-gray-200">
              Editing: {activeSketchId ? recipeForm.sketches.find(s => s.id === activeSketchId)?.name : 'New Sketch'}
            </h4>
            <div className="relative" style={{ paddingBottom: '56.25%' /* 16:9 Aspect Ratio */ }}>
              <canvas
                ref={canvasRef}
                className="absolute top-0 left-0 w-full h-full cursor-crosshair bg-white"
                style={{touchAction: 'none'}} // Prevent scrolling on touch devices while drawing
              ></canvas>
            </div>
          </div>
          <div className="mt-4 flex gap-3">
            <button
              type="button"
              onClick={clearCanvas}
              className="bg-gray-400 hover:bg-gray-500 text-white font-bold py-2 px-4 rounded-md shadow-sm transition-colors duration-200"
            >
              Clear Current Sketch
            </button>
            {/* Optional: Button to explicitly save current state, although it autosaves on mouseup/touchend */}
            {activeSketchId && (
              <input
                type="text"
                value={recipeForm.sketches.find(s => s.id === activeSketchId)?.name || ''}
                onChange={(e) => updateSketchName(activeSketchId, e.target.value)}
                className="flex-grow max-w-xs mt-1 block px-3 py-2 border border-gray-300 rounded-md shadow-sm text-sm"
                placeholder="Sketch name"
              />
            )}
          </div>
        </div>


        {/* Form Actions */}
        <div className="flex justify-end gap-4 mt-8">
          <button
            type="button"
            onClick={() => { setCurrentView('recipes'); resetRecipeForm(); }}
            className="px-6 py-3 bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold rounded-lg shadow-md transition-colors duration-200"
          >
            Cancel
          </button>
          <button
            type="submit"
            className="px-6 py-3 bg-emerald-600 hover:bg-emerald-700 text-white font-bold rounded-lg shadow-md transition-all duration-300 ease-in-out transform hover:scale-105"
          >
            {isEdit ? 'Update Recipe' : 'Add Recipe'}
          </button>
        </div>
      </form>
    </div>
  );

  // --- Ingredient Management View ---
  const IngredientListView = () => {
    // State for new ingredient form
    const [newIngredient, setNewIngredient] = useState({ name: '', unit: '', cost: '', vendor: '', lastUpdated: new Date().toISOString().split('T')[0] });
    const [editingIngredient, setEditingIngredient] = useState(null);

    const handleNewIngredientChange = (e) => {
      const { name, value } = e.target;
      setNewIngredient(prev => ({ ...prev, [name]: value }));
    };

    const handleAddOrUpdateIngredient = async (e) => {
      e.preventDefault();
      if (editingIngredient) {
        await updateIngredient(editingIngredient.id, newIngredient);
        setEditingIngredient(null);
      } else {
        await addIngredient(newIngredient);
      }
      setNewIngredient({ name: '', unit: '', cost: '', vendor: '', lastUpdated: new Date().toISOString().split('T')[0] }); // Reset form
    };

    const startEditIngredient = (ingredient) => {
      setEditingIngredient(ingredient);
      setNewIngredient(ingredient); // Pre-fill form with ingredient data
    };

    return (
      <div className="container mx-auto p-4 md:p-6 bg-white rounded-lg shadow-lg mt-8">
        <h2 className="text-3xl font-bold text-gray-800 mb-6 border-b-2 border-emerald-400 pb-2">Ingredient Database</h2>

        {/* Add/Edit Ingredient Form */}
        <form onSubmit={handleAddOrUpdateIngredient} className="bg-gray-50 p-6 rounded-xl shadow-inner mb-8">
          <h3 className="text-xl font-bold text-teal-700 mb-4">{editingIngredient ? 'Edit Ingredient' : 'Add New Ingredient'}</h3>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-4">
            <div>
              <label htmlFor="ing-name" className="block text-sm font-semibold text-gray-700 mb-1">Name</label>
              <input type="text" id="ing-name" name="name" value={newIngredient.name} onChange={handleNewIngredientChange} className="form-input" placeholder="e.g., Chicken Breast" required />
            </div>
            <div>
              <label htmlFor="ing-unit" className="block text-sm font-semibold text-gray-700 mb-1">Unit</label>
              <input type="text" id="ing-unit" name="unit" value={newIngredient.unit} onChange={handleNewIngredientChange} className="form-input" placeholder="e.g., kg, each" />
            </div>
            <div>
              <label htmlFor="ing-cost" className="block text-sm font-semibold text-gray-700 mb-1">Cost (per unit)</label>
              <input type="number" step="0.01" id="ing-cost" name="cost" value={newIngredient.cost} onChange={handleNewIngredientChange} className="form-input" placeholder="e.g., 5.99" />
            </div>
            <div>
              <label htmlFor="ing-vendor" className="block text-sm font-semibold text-gray-700 mb-1">Vendor</label>
              <input type="text" id="ing-vendor" name="vendor" value={newIngredient.vendor} onChange={handleNewIngredientChange} className="form-input" placeholder="e.g., Sysco" />
            </div>
          </div>
          <div className="flex justify-end gap-3">
            {editingIngredient && (
              <button type="button" onClick={() => { setEditingIngredient(null); setNewIngredient({ name: '', unit: '', cost: '', vendor: '', lastUpdated: new Date().toISOString().split('T')[0] }); }} className="bg-gray-400 hover:bg-gray-500 text-white font-bold py-2 px-4 rounded-md shadow-sm transition-colors duration-200">
                Cancel Edit
              </button>
            )}
            <button type="submit" className="bg-emerald-500 hover:bg-emerald-600 text-white font-bold py-2 px-4 rounded-md shadow-md transition-colors duration-200">
              {editingIngredient ? 'Update Ingredient' : 'Add Ingredient'}
            </button>
          </div>
        </form>

        {/* Ingredient List */}
        {ingredients.length === 0 ? (
          <p className="text-gray-600 text-lg">No ingredients added yet.</p>
        ) : (
          <div className="overflow-x-auto rounded-lg shadow-md">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider rounded-tl-lg">Name</th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Unit</th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Cost</th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Vendor</th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Last Updated</th>
                  <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider rounded-tr-lg">Actions</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {ingredients.map((ing) => (
                  <tr key={ing.id} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{ing.name}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600">{ing.unit}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600">${parseFloat(ing.cost || 0).toFixed(2)}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600">{ing.vendor}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-600">{ing.lastUpdated}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <button onClick={() => startEditIngredient(ing)} className="text-indigo-600 hover:text-indigo-900 mr-3">Edit</button>
                      <button onClick={() => deleteIngredient(ing.id)} className="text-red-600 hover:text-red-900">Delete</button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>
    );
  };

  // --- Menu Management View ---
  const MenuListView = () => {
    const [newMenu, setNewMenu] = useState({ name: '', description: '', dishes: [], creationDate: new Date().toISOString().split('T')[0] });
    const [editingMenu, setEditingMenu] = useState(null);
    const [selectedDishes, setSelectedDishes] = useState([]); // For dish selection in form

    useEffect(() => {
      if (editingMenu) {
        setNewMenu(editingMenu);
        setSelectedDishes(editingMenu.dishes.map(d => d.recipeId));
      } else {
        setNewMenu({ name: '', description: '', dishes: [], creationDate: new Date().toISOString().split('T')[0] });
        setSelectedDishes([]);
      }
    }, [editingMenu]);

    const handleNewMenuChange = (e) => {
      const { name, value } = e.target;
      setNewMenu(prev => ({ ...prev, [name]: value }));
    };

    const handleDishSelection = (e) => {
      const selectedOptions = Array.from(e.target.selectedOptions);
      setSelectedDishes(selectedOptions.map(option => option.value));
    };

    const handleAddOrUpdateMenu = async (e) => {
      e.preventDefault();
      // Map selected recipe IDs to objects {recipeId, recipeName}
      const dishesForMenu = selectedDishes.map(id => {
        const recipe = recipes.find(r => r.id === id);
        return { recipeId: id, recipeName: recipe ? recipe.name : 'Unknown Recipe' };
      });

      const menuToSave = { ...newMenu, dishes: dishesForMenu };

      if (editingMenu) {
        await updateMenu(editingMenu.id, menuToSave);
        setEditingMenu(null);
      } else {
        await addMenu(menuToSave);
      }
      setNewMenu({ name: '', description: '', dishes: [], creationDate: new Date().toISOString().split('T')[0] }); // Reset form
      setSelectedDishes([]);
    };

    const startEditMenu = (menu) => {
      setEditingMenu(menu);
    };

    return (
      <div className="container mx-auto p-4 md:p-6 bg-white rounded-lg shadow-lg mt-8">
        <h2 className="text-3xl font-bold text-gray-800 mb-6 border-b-2 border-emerald-400 pb-2">Menu Planner</h2>

        {/* Add/Edit Menu Form */}
        <form onSubmit={handleAddOrUpdateMenu} className="bg-gray-50 p-6 rounded-xl shadow-inner mb-8">
          <h3 className="text-xl font-bold text-teal-700 mb-4">{editingMenu ? 'Edit Menu' : 'Create New Menu'}</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <div>
              <label htmlFor="menu-name" className="block text-sm font-semibold text-gray-700 mb-1">Menu Name</label>
              <input type="text" id="menu-name" name="name" value={newMenu.name} onChange={handleNewMenuChange} className="form-input" placeholder="e.g., Summer Dinner Party" required />
            </div>
            <div>
              <label htmlFor="menu-date" className="block text-sm font-semibold text-gray-700 mb-1">Creation Date</label>
              <input type="date" id="menu-date" name="creationDate" value={newMenu.creationDate} onChange={handleNewMenuChange} className="form-input" />
            </div>
          </div>
          <div className="mb-4">
            <label htmlFor="menu-description" className="block text-sm font-semibold text-gray-700 mb-1">Description</label>
            <textarea id="menu-description" name="description" value={newMenu.description} onChange={handleNewMenuChange} className="form-input" rows="3" placeholder="Brief description of the menu"></textarea>
          </div>
          <div className="mb-6">
            <label htmlFor="menu-dishes" className="block text-sm font-semibold text-gray-700 mb-1">Select Dishes (Recipes)</label>
            <select
              multiple
              id="menu-dishes"
              value={selectedDishes}
              onChange={handleDishSelection}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-emerald-500 focus:border-emerald-500 sm:text-sm h-32"
            >
              {recipes.map(recipe => (
                <option key={recipe.id} value={recipe.id}>{recipe.name}</option>
              ))}
            </select>
            <p className="text-xs text-gray-500 mt-2">Hold Ctrl/Cmd to select multiple dishes.</p>
          </div>

          <div className="flex justify-end gap-3">
            {editingMenu && (
              <button type="button" onClick={() => { setEditingMenu(null); setNewMenu({ name: '', description: '', dishes: [], creationDate: new Date().toISOString().split('T')[0] }); setSelectedDishes([]); }} className="bg-gray-400 hover:bg-gray-500 text-white font-bold py-2 px-4 rounded-md shadow-sm transition-colors duration-200">
                Cancel Edit
              </button>
            )}
            <button type="submit" className="bg-emerald-500 hover:bg-emerald-600 text-white font-bold py-2 px-4 rounded-md shadow-md transition-colors duration-200">
              {editingMenu ? 'Update Menu' : 'Create Menu'}
            </button>
          </div>
        </form>

        {/* Menu List */}
        {menus.length === 0 ? (
          <p className="text-gray-600 text-lg">No menus created yet.</p>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {menus.map((menu) => (
              <div key={menu.id} className="bg-gray-50 p-6 rounded-xl shadow-md border border-gray-200 hover:shadow-lg transition-shadow duration-300">
                <h3 className="text-xl font-bold text-teal-700 mb-2">{menu.name}</h3>
                <p className="text-sm text-gray-600 mb-2">{menu.description}</p>
                <p className="text-xs text-gray-500">Created: {menu.creationDate}</p>
                <div className="mt-3">
                  <h4 className="text-sm font-semibold text-gray-700">Dishes:</h4>
                  <ul className="list-disc list-inside text-sm text-gray-600">
                    {menu.dishes.map((dish, idx) => (
                      <li key={idx}>{dish.recipeName}</li>
                    ))}
                  </ul>
                </div>
                <div className="mt-4 flex gap-3">
                  <button onClick={() => startEditMenu(menu)} className="bg-yellow-500 hover:bg-yellow-600 text-white text-sm py-2 px-4 rounded-lg transition-colors duration-200 shadow-md">
                    Edit
                  </button>
                  <button onClick={() => deleteMenu(menu.id)} className="bg-red-500 hover:bg-red-600 text-white text-sm py-2 px-4 rounded-lg transition-colors duration-200 shadow-md">
                    Delete
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    );
  };

  // --- Equipment Management View ---
  const EquipmentListView = () => {
    const [newEquipment, setNewEquipment] = useState({ name: '', type: '', purchaseDate: new Date().toISOString().split('T')[0], condition: '' });
    const [editingEquipment, setEditingEquipment] = useState(null);

    const handleNewEquipmentChange = (e) => {
      const { name, value } = e.target;
      setNewEquipment(prev => ({ ...prev, [name]: value }));
    };

    const handleAddOrUpdateEquipment = async (e) => {
      e.preventDefault();
      if (editingEquipment) {
        await updateEquipment(editingEquipment.id, newEquipment);
        setEditingEquipment(null);
      } else {
        await addEquipment(newEquipment);
      }
      setNewEquipment({ name: '', type: '', purchaseDate: new Date().toISOString().split('T')[0], condition: '' }); // Reset form
    };

    const startEditEquipment = (equipmentItem) => {
      setEditingEquipment(equipmentItem);
      setNewEquipment(equipmentItem);
    };

    return (
      <div className="container mx-auto p-4 md:p-6 bg-white rounded-lg shadow-lg mt-8">
        <h2 className="text-3xl font-bold text-gray-800 mb-6 border-b-2 border-emerald-400 pb-2">Equipment Inventory</h2>

        {/* Add/Edit Equipment Form */}
        <form onSubmit={handleAddOrUpdateEquipment} className="bg-gray-50 p-6 rounded-xl shadow-inner mb-8">
          <h3 className="text-xl font-bold text-teal-700 mb-4">{editingEquipment ? 'Edit Equipment' : 'Add New Equipment'}</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
            <div>
              <label htmlFor="eq-name" className="block text-sm font-semibold text-gray-700 mb-1">Name</label>
              <input type="text" id="eq-name" name="name" value={newEquipment.name} onChange={handleNewEquipmentChange} className="form-input" placeholder="e.g., Stand Mixer" required />
            </div>
            <div>
              <label htmlFor="eq-type" className="block text-sm font-semibold text-gray-700 mb-1">Type</label>
              <input type="text" id="eq-type" name="type" value={newEquipment.type} onChange={handleNewEquipmentChange} className="form-input" placeholder="e.g., Baking, Cooking, Prep" />
            </div>
            <div>
              <label htmlFor="eq-date" className="block text-sm font-semibold text-gray-700 mb-1">Purchase Date</label>
              <input type="date" id="eq-date" name="purchaseDate" value={newEquipment.purchaseDate} onChange={handleNewEquipmentChange} className="form-input" />
            </div>
            <div className="col-span-1 md:col-span-3">
              <label htmlFor="eq-condition" className="block text-sm font-semibold text-gray-700 mb-1">Condition</label>
              <textarea id="eq-condition" name="condition" value={newEquipment.condition} onChange={handleNewEquipmentChange} className="form-input" rows="2" placeholder="e.g., Excellent, Needs Repair"></textarea>
            </div>
          </div>
          <div className="flex justify-end gap-3">
            {editingEquipment && (
              <button type="button" onClick={() => { setEditingEquipment(null); setNewEquipment({ name: '', type: '', purchaseDate: new Date().toISOString().split('T')[0], condition: '' }); }} className="bg-gray-400 hover:bg-gray-500 text-white font-bold py-2 px-4 rounded-md shadow-sm transition-colors duration-200">
                Cancel Edit
              </button>
            )}
            <button type="submit" className="bg-emerald-500 hover:bg-emerald-600 text-white font-bold py-2 px-4 rounded-md shadow-md transition-colors duration-200">
              {editingEquipment ? 'Update Equipment' : 'Add Equipment'}
            </button>
          </div>
        </form>

        {/* Equipment List */}
        {equipment.length === 0 ? (
          <p className="text-gray-600 text-lg">No equipment added yet.</p>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {equipment.map((item) => (
              <div key={item.id} className="bg-gray-50 p-6 rounded-xl shadow-md border border-gray-200 hover:shadow-lg transition-shadow duration-300">
                <h3 className="text-xl font-bold text-teal-700 mb-2">{item.name}</h3>
                <p className="text-sm text-gray-600 mb-1">Type: {item.type}</p>
                <p className="text-sm text-gray-600 mb-1">Purchased: {item.purchaseDate}</p>
                <p className="text-sm text-gray-600">Condition: {item.condition}</p>
                <div className="mt-4 flex gap-3">
                  <button onClick={() => startEditEquipment(item)} className="bg-yellow-500 hover:bg-yellow-600 text-white text-sm py-2 px-4 rounded-lg transition-colors duration-200 shadow-md">
                    Edit
                  </button>
                  <button onClick={() => deleteEquipment(item.id)} className="bg-red-500 hover:bg-red-600 text-white text-sm py-2 px-4 rounded-lg transition-colors duration-200 shadow-md">
                    Delete
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    );
  };


  return (
    <div className="min-h-screen bg-gray-100 font-sans text-gray-900 flex flex-col">
      {/* Tailwind CSS CDN - Ensure this is in the HTML head in a production environment */}
      <script src="https://cdn.tailwindcss.com"></script>
      {/* Inter font - Ensure this is linked in the HTML head */}
      <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet" />
      <style>
        {`
          body {
            font-family: 'Inter', sans-serif;
            margin: 0;
            padding: 0;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
          /* Custom form input styles for consistency */
          .form-input {
            @apply mt-1 block w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-emerald-500 focus:border-emerald-500 sm:text-sm;
          }
          /* Basic styling for the canvas container to define its aspect ratio for drawing */
          .canvas-container {
            width: 100%;
            padding-bottom: 56.25%; /* 16:9 Aspect Ratio */
            position: relative;
            background-color: #fff;
            border: 1px solid #ccc;
            border-radius: 0.5rem;
            overflow: hidden;
          }
          .canvas-container canvas {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            display: block;
            touch-action: none; /* Prevents scrolling when drawing on touch devices */
          }
        `}
      </style>

      <Header />

      <main className="flex-grow pb-8">
        {(() => {
          switch (currentView) {
            case 'recipes':
              return <RecipeListView />;
            case 'add-recipe':
              return <RecipeFormView isEdit={false} />;
            case 'edit-recipe':
              return <RecipeFormView isEdit={true} />;
            case 'ingredients':
              return <IngredientListView />;
            case 'menus':
              return <MenuListView />;
            case 'equipment':
              return <EquipmentListView />;
            default:
              return <RecipeListView />;
          }
        })()}
      </main>

      <Footer />
    </div>
  );
};

export default App;
